<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>David Saltares</title>
    <link>https://saltares.com/</link>
    <description>Recent content on David Saltares</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <lastBuildDate>Tue, 02 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://saltares.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>7 ways to make performance reviews painless and fair</title>
      <link>https://saltares.com/7-ways-to-make-performance-reviews-painless-and-fair/</link>
      <pubDate>Tue, 02 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://saltares.com/7-ways-to-make-performance-reviews-painless-and-fair/</guid>
      <description>By Celpax on Unsplash Periodical performance reviews are typical in medium and larger organisations. Whether quarterly or yearly, it&amp;rsquo;s interesting to see reports and managers universally dread them. Reports get anxious about a bad review or a pay rise below their expectations. At the same time, managers feel the process is cumbersome, wasteful and are concerned they are not being fair with all team members.
Luckily, it doesn&amp;rsquo;t have to be like that at all.</description>
      <content>&lt;p&gt;
  &lt;figure&gt;
    &lt;img class=&#34;figure-image&#34; src=&#34;./img/woman-leaves-feedback.jpg&#34; alt=&#34;Woman rates experience on a panel as she leaves&#34;&gt;
    &lt;figcaption&gt;By Celpax on &lt;a href=&#34;https://unsplash.com/photos/1Lf5Adh9SCg&#34;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;

&lt;/p&gt;
&lt;p&gt;Periodical performance reviews are typical in medium and larger organisations. Whether quarterly or yearly, it&amp;rsquo;s interesting to see reports and managers universally dread them. Reports get anxious about a bad review or a pay rise below their expectations. At the same time, managers feel the process is cumbersome, wasteful and are concerned they are not being fair with all team members.&lt;/p&gt;
&lt;p&gt;Luckily, it doesn&amp;rsquo;t have to be like that at all. Performance reviews, when done well, can provide perspective, and clarity, build trust and help folks progress in their careers. In this article, I go through 7 tips to make performance reviews painless and fair for everybody involved.&lt;/p&gt;
&lt;h2 id=&#34;1-give-frequent-feedback-to-avoid-surprises&#34;&gt;üò±¬†1. Give frequent feedback to avoid surprises&lt;/h2&gt;
&lt;p&gt;If you were to take away one thing only from this article, please let it be this one. As a manager, it is entirely your fault whenever someone is genuinely surprised with the feedback they receive during a performance review.&lt;/p&gt;
&lt;p&gt;You can avoid this by having regular 1-1s where you set expectations, jointly create goals and share feedback. Giving feedback can sometimes be challenging, especially when someone is not performing. However, you must remember that you are failing the individual and the entire team if you don&amp;rsquo;t. The individual does not get the input they need to improve. They may end up being let go without having received proper support. At the same time, you risk alienating the team if you let poor performance go unaddressed. Giving feedback is the kind thing to do. If you need a few pointers, read &lt;a href=&#34;https://www.radicalcandor.com/&#34;&gt;Radical Candor&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;2-make-the-goal-of-the-review-clear&#34;&gt;üéØ¬†2. Make the goal of the review clear&lt;/h2&gt;
&lt;p&gt;Before the review process begins, you should ensure everyone understands the goal of performance evaluations in your company&amp;rsquo;s context. Most of the time, it tends to be along the lines of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Summary of performance and progress vs expectations.&lt;/li&gt;
&lt;li&gt;Reflect on former goals and set new ones.&lt;/li&gt;
&lt;li&gt;Update compensation based on performance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Knowing what the point of the review is about will help all parties handle the conversation.&lt;/p&gt;
&lt;h2 id=&#34;3-use-a-template&#34;&gt;‚öñÔ∏è¬†3. Use a template&lt;/h2&gt;
&lt;p&gt;Writing performance evaluations for a team of 10 individuals without formal structure can easily let unconscious bias creep in. Biases are human, and the nasty thing about unconscious bias is you don&amp;rsquo;t even realise it&amp;rsquo;s affecting your judgement. That is no joke when promotions, pay rises or performance improvement plans are on the line.&lt;/p&gt;
&lt;p&gt;A standard structure for all reviews will make them fairer. An added plus is that you will not start from a blank sheet of paper. You will also save time!&lt;/p&gt;
&lt;p&gt;Most large organisations have a common template, but it could be something like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Achievements.&lt;/li&gt;
&lt;li&gt;Areas for improvement.&lt;/li&gt;
&lt;li&gt;Goals: ideally to be filled in together.&lt;/li&gt;
&lt;li&gt;Overall: below/meets/above expectations.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-set-clear-expectations-from-the-get-go&#34;&gt;üîÆ¬†4. Set clear expectations from the get-go&lt;/h2&gt;
&lt;p&gt;Before you even give feedback to someone, you must be explicit about what you expect. Being told you are not meeting expectations when those expectations were not even made clear can be an incredibly frustrating experience and break all trust.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Why didn&amp;rsquo;t you tell me before?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It is your responsibility to set clear expectations. You should routinely do this at multiple levels: individual, project and team. An effective way to ensure individual expectations are fair is to use an engineering-wide progression framework. Each level in the framework will have associated responsibilities and expected behaviours. When the framework is clear and transparent, everyone will trust performance evaluations are fair.&lt;/p&gt;
&lt;p&gt;Creating a sound engineering career progression framework could well be an entire article series. In the meantime, you can check &lt;a href=&#34;http://progression.fyi&#34;&gt;&lt;code&gt;progression.fyi&lt;/code&gt;&lt;/a&gt; for inspiration.&lt;/p&gt;
&lt;h2 id=&#34;5-write-everything-down&#34;&gt;‚úçÔ∏è¬†5. Write everything down&lt;/h2&gt;
&lt;p&gt;Do you want to put people&amp;rsquo;s careers in the hands of your memory? Forgetting some team member&amp;rsquo;s achievement is relatively easy and could very well be the difference between ‚Äú&lt;em&gt;meets‚Äù&lt;/em&gt; and ‚Äú&lt;em&gt;exceeds‚Äù&lt;/em&gt; expectations. Who knows, perhaps they should be getting a 20% raise but get 5% instead.&lt;/p&gt;
&lt;p&gt;Write everything down and examine your notes for that particular individual when working on their evaluation. A convenient place to keep notes is your 1-1 doc with that person. If you don&amp;rsquo;t want them to be able to read your raw notes, keep a separate individual doc that&amp;rsquo;s private. Whatever works best for you, just write everything down. Not only will you give fairer evaluations, but you will also write them much faster!&lt;/p&gt;
&lt;h2 id=&#34;6-reflect-on-support&#34;&gt;ü§ó¬†6. Reflect on support&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ve talked a lot about expectations but haven&amp;rsquo;t mentioned support until now. You probably want to have high expectations but also high levels of support.&lt;/p&gt;
&lt;p&gt;Even when your expectations are clear and you give frequent feedback, your evaluation may still be unfair if an individual receives much less support than another. The consequences of having wildly different levels of support can be especially damaging when it comes to people from underrepresented backgrounds.&lt;/p&gt;
&lt;p&gt;Observing differences in levels of support can be tricky, but you can look at a few things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Amount of time colleagues spend mentoring them or pairing together.&lt;/li&gt;
&lt;li&gt;Resources received for training.&lt;/li&gt;
&lt;li&gt;The number of opportunities you send their way as their manager.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Take time to observe and reflect on this periodically.&lt;/p&gt;
&lt;h2 id=&#34;7-set-and-periodically-monitor-goals&#34;&gt;üèÅ¬†7. Set and periodically monitor goals&lt;/h2&gt;
&lt;p&gt;Performance reviews can be an excellent opportunity to reflect and set goals together for the next cycle and beyond. Goals that are jointly set result in higher levels of ownership by the individual.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Master event-driven architecture.&lt;/li&gt;
&lt;li&gt;Champion a team-wide initiative that makes software delivery better.&lt;/li&gt;
&lt;li&gt;Get promoted to senior engineer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do not park these goals until the next review cycle. Instead, have them present and discuss them frequently during 1-1s. This will create accountability and many opportunities for feedback.&lt;/p&gt;
&lt;p&gt;üôå¬†Thanks for reading! Hopefully, these tips will help you deliver fairer reviews more easily. If you have additional ideas, please do send them my way.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Fully integrate contractors into your team</title>
      <link>https://saltares.com/fully-integrate-contractors-into-your-team/</link>
      <pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://saltares.com/fully-integrate-contractors-into-your-team/</guid>
      <description>Sky Sports Your team has to hit a key milestone this year, but capacity is short. Everyone is worried, and tensions build up. As an Engineering leader, you are keen to reduce the burnout risk and consider hiring a couple of contractors or working with a software agency to speed things up without hiring full-time folks. But are you fully aware of the trade-offs?
This article covers the benefits and risks of working with engineering contractors as well as the measures you can put in place to maximise your chances of success!</description>
      <content>&lt;p&gt;
  &lt;figure&gt;
    &lt;img class=&#34;figure-image&#34; src=&#34;./img/contractors/spanish-women-team.jpg&#34; alt=&#34;Spain‚Äôs women‚Äôs national football team celebrate a goal&#34;&gt;
    &lt;figcaption&gt;&lt;a href=&#34;https://www.skysports.com/football/news/11095/12649982/womens-euros-2022-preview-germany-face-spain-in-potential-group-b-decider-while-denmark-play-finland&#34;&gt;Sky Sports&lt;/a&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;

&lt;/p&gt;
&lt;p&gt;Your team has to hit a key milestone this year, but capacity is short. Everyone is worried, and tensions build up. As an Engineering leader, you are keen to reduce the burnout risk and consider hiring a couple of contractors or working with a software agency to speed things up without hiring full-time folks. But are you fully aware of the trade-offs?&lt;/p&gt;
&lt;p&gt;This article covers the benefits and risks of working with engineering contractors as well as the measures you can put in place to maximise your chances of success!&lt;/p&gt;
&lt;p&gt;Working with contractors and agencies can benefit your team in a few ways.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;üèéÔ∏è¬†Quickly add capacity to a team. Finding a great contractor is way faster than finding full-time engineers (FTE).&lt;/li&gt;
&lt;li&gt;üíº¬†Push a critical project over the finish line.&lt;/li&gt;
&lt;li&gt;üë©‚Äçüî¨¬†Help with highly specialised work and train the team in some new technology.&lt;/li&gt;
&lt;li&gt;üí∏¬†Avoid the long-term commitment of full-time employees.&lt;/li&gt;
&lt;li&gt;üå°Ô∏è¬†Deal with seasonal surges of work.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, working with agencies and contractors presents risks and trade-offs.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;üòï¬†Reduced vetting can lead to cultural misalignment and quality issues. Most agencies won‚Äôt allow you to interview their people. They already do their vetting! Similarly, hiring processes for independent contractors tend to be lighter for companies to remain competitive.&lt;/li&gt;
&lt;li&gt;üòû¬†Onboarding is still required to fully understand the product and make the right decisions when building new features, both from technical and UX standpoints.&lt;/li&gt;
&lt;li&gt;üò©¬†Incentives may be misaligned. Agencies want to finish the project they were hired for and upsell you. Independent contractors will be worried about finding their next gig instead of having to maintain the code they just wrote while working with you.&lt;/li&gt;
&lt;li&gt;üí∏¬†When the experience level is equal, contractors are far more expensive than full-time employees.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The best way to hedge these risks is to treat contractors like any other member of the team. Contractors are people too! Building personal connections and trust with the rest of the organisation and staying tuned into current priorities will give them the context and tools to succeed.&lt;/p&gt;
&lt;p&gt;Here is a list of practical measures you can put in place to maximise the success of your contractor bet.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ü•ê¬†Hold a welcome breakfast. On their first day, introduce them to the team in an informal setting. Doing it over a remote coffee works too!&lt;/li&gt;
&lt;li&gt;ü§ó¬†Accelerated onboarding. Focus on getting to know the product, basic architecture and team practices. For example, &lt;em&gt;this is how we write our React components&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;üîê¬†Make sure they have access to all the systems and information they need. Whenever they need to ask for access, it reminds them they do not belong.&lt;/li&gt;
&lt;li&gt;ü•á¬†Set expectations as early as possible. Use your expectations framework if possible! Not every contractor may have worked in a highly integrated manner. Understanding your expectations and the support available to them will be vital in setting them up for success.&lt;/li&gt;
&lt;li&gt;ü§ù¬†Include them in team rituals: all hands, refinement, ideation, and others. This will help them &lt;a href=&#34;./help-engineers-understand-the-why/&#34;&gt;understand why you are building things&lt;/a&gt; and the trade-offs they should be making.&lt;/li&gt;
&lt;li&gt;üéÆ¬†Team building/socials that help build relationships and trust&lt;/li&gt;
&lt;li&gt;üí¨¬†Hold 1-1s with them. Perhaps you won‚Äôt focus on career goals, but you can share feedback early, course correct and understand what they need to succeed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Another aspect to consider is team topology. I often see leaders spinning up contractor-only teams who work in quasi-isolation.&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/contractors/isolated-contractor-team.png&#34; alt=&#34;Isolated contractor team&#34;&gt;

&lt;/p&gt;
&lt;p&gt;Instead, I recommend you consider spreading contractors across multiple teams whenever possible. This way, engineering contractors will benefit from a far more robust support network as they onboard. They can pair with more tenured engineers and pick up on their knowledge and context.&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/contractors/integrated-contractors.png&#34; alt=&#34;Integrated contractors&#34;&gt;

&lt;/p&gt;
&lt;p&gt;Hiring contractors or working with agencies is a significant investment. To get the most out of it, optimise for integrating them into your existing teams as much as possible.&lt;/p&gt;
&lt;p&gt;üôå¬†Thanks for reading! Do you have other ideas to improve the way you work with contractors? Please share them with me!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>In support of hiring generalists for most early-stage startups</title>
      <link>https://saltares.com/in-support-of-hiring-generalists-for-most-early-stage-startups/</link>
      <pubDate>Mon, 04 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://saltares.com/in-support-of-hiring-generalists-for-most-early-stage-startups/</guid>
      <description>By Denise Jan on Unsplash The vast majority of early-stage startup products consist of an application made of a handful of UI screens, a few CRUD APIs, real-time updates, notifications and not much else. However, when it is time to build a small team, many hire specialist roles from day one. For example, in a team of 4 engineers, you often see specific frontend, backend, iOS and DevOps roles. If the company later wanted to build an Android app, they would also hire an Android engineer.</description>
      <content>&lt;p&gt;
  &lt;figure&gt;
    &lt;img class=&#34;figure-image&#34; src=&#34;./img/swiss-army-knife.jpg&#34; alt=&#34;Swiss army knife&#34;&gt;
    &lt;figcaption&gt;By Denise Jan on &lt;a href=&#34;https://unsplash.com/photos/-J1cTtVpj8k&#34;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;

&lt;/p&gt;
&lt;p&gt;The vast majority of early-stage startup products consist of an application made of a handful of UI screens, a few CRUD APIs, real-time updates, notifications and not much else. However, when it is time to build a small team, many hire specialist roles from day one. For example, in a team of 4 engineers, you often see specific frontend, backend, iOS and DevOps roles. If the company later wanted to build an Android app, they would also hire an Android engineer.&lt;/p&gt;
&lt;p&gt;I think this is a mistake in 95% of cases.&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/generalists/specialised-org.png&#34; alt=&#34;Specialised Engineering organisation&#34;&gt;

&lt;/p&gt;
&lt;p&gt;Here are some of the consequences of a heavily specialised team early on in a startup‚Äôs life.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;üõë¬†Development can halt whenever anyone goes on holiday or gets sick.&lt;/li&gt;
&lt;li&gt;üò±¬†There‚Äôs always severe disruption when someone leaves the company as they are typically the only person holding all the knowledge of a particular system area.&lt;/li&gt;
&lt;li&gt;üõ£Ô∏è¬†The team is less able to adapt to changing priorities. For example, the iOS app is abandoned in favour of a web application with a larger scope. Startups are high uncertainty environments, and this is likely to happen.&lt;/li&gt;
&lt;li&gt;ü§î¬†It‚Äôs easy for engineers to fall into the trap of thinking in terms of UI screens and API endpoints instead of user experiences and real value.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instead, I would encourage CTOs and founders to consider hiring fullstack engineers or generalists.&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/generalists/generalist-org.png&#34; alt=&#34;Generalist Engineering organisation&#34;&gt;

&lt;/p&gt;
&lt;p&gt;Generalists are not experts and thought leaders in every software development field. Such a person does not exist. At the very least, you‚Äôll have a tough time finding and hiring them. I am talking about engineers with t-shaped skillsets. A fullstack engineer may know more about building amazing frontends and prefer to work in that area. At the same time, they will be versatile enough to be productive and create quality work for others.&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/generalists/t-shaped-skillset.png&#34; alt=&#34;T-Shaped Skillset diagram&#34;&gt;

&lt;/p&gt;
&lt;p&gt;Before going to hire, you should analyse the current gaps of the team so that you can bring a generalist aboard whose top skills fill some of those gaps. Then, you can promote activities like tech talks and pairing so that the knowledge of the new joiner spreads across the team.&lt;/p&gt;
&lt;p&gt;Some of the benefits of hiring generalists early on are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;üí™¬†Your team is more resilient to people being out, whether on holiday or permanently.&lt;/li&gt;
&lt;li&gt;üßò‚Äç‚ôÄÔ∏è¬†Increased flexibility, you have folks who can work on the most important thing‚Ñ¢.&lt;/li&gt;
&lt;li&gt;ü•Ö¬†It becomes easier to encourage product thinking and help engineers focus on finding &lt;a href=&#34;https://en.wikipedia.org/wiki/Product/market_fit&#34;&gt;PMF&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, everything comes with a disclaimer, as there are few absolute truths when building products. I said that hiring specialists early on may be a bad idea 95% of the time. Well, what about the remaining 5%.&lt;/p&gt;
&lt;p&gt;When hiring, you should always work back from business goals. In some cases, hiring specialists from the get-go may make sense. Here are a couple of examples.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your mobile experience cannot be replicated as a web or React Native app, and you need folks who can write iOS or Android native apps.&lt;/li&gt;
&lt;li&gt;Your product is a REST API with a complex AI system behind the scenes and no graphical UI. You may want AI engineers who can also write APIs.&lt;/li&gt;
&lt;li&gt;You run a web3 Ponzi scheme and need blockchain experts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;üôå¬†Thanks for reading.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>The problem of long-lived pull requests</title>
      <link>https://saltares.com/the-problem-of-long-lived-pull-requests/</link>
      <pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://saltares.com/the-problem-of-long-lived-pull-requests/</guid>
      <description>By John Schnobrich on Unsplash A developer in your team picks up a new ticket, dashes to implement the change and opens a brand new PR in no time. Brilliant! However, the team was not aligned on the solution approach. There are issues with the coding style, lack of tests and other little things. Back and forth ensues, and the PR stays open for about a week before it gets merged to main.</description>
      <content>&lt;p&gt;
  &lt;figure&gt;
    &lt;img class=&#34;figure-image&#34; src=&#34;./img/code-review.jpg&#34; alt=&#34;People pointing at a laptop screen&#34;&gt;
    &lt;figcaption&gt;By John Schnobrich on &lt;a href=&#34;https://unsplash.com/photos/FlPc9_VocJ4&#34;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;

&lt;/p&gt;
&lt;p&gt;A developer in your team picks up a new ticket, dashes to implement the change and opens a brand new PR in no time. Brilliant! However, the team was not aligned on the solution approach. There are issues with the coding style, lack of tests and other little things. Back and forth ensues, and the PR stays open for about a week before it gets merged to &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It becomes a problem when this doesn‚Äôt happen just the one time. The good thing is that you‚Äôre not alone. I see this problem in teams all the time.&lt;/p&gt;
&lt;p&gt;Typically, a misalignment as to what productivity means causes the problem. Some developers may be optimising for number of PRs created when what you want is to deliver value constantly. &lt;a href=&#34;https://lauratacho.com/blog&#34;&gt;Laura Tacho&lt;/a&gt; covers the issue exceptionally well in this &lt;a href=&#34;https://twitter.com/rhein_wein/status/1536351600620425216&#34;&gt;Twitter thread&lt;/a&gt;. Sometimes, folks may not be entirely aware of the impact of long-lived PRs.&lt;/p&gt;
&lt;h2 id=&#34;the-impact&#34;&gt;üî•¬†The impact&lt;/h2&gt;
&lt;p&gt;The impact of having many open PRs for too long can be significant.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;üí∏¬†As Software Delivery slows down, customers receive value less often, and you run fewer experiments that give you feedback to improve your &lt;a href=&#34;https://en.wikipedia.org/wiki/Product/market_fit&#34;&gt;PMF&lt;/a&gt;. You‚Äôre becoming less competitive!&lt;/li&gt;
&lt;li&gt;ü•µ¬†As most of the work is only &lt;a href=&#34;https://www.simplethread.com/the-10x-programmer-myth/&#34;&gt;80% done&lt;/a&gt;, developers constantly jump between PRs and their in-progress work, resulting in a tremendous amount of context switching. This &lt;a href=&#34;https://pacohq.com/blog/guide/the-high-price-of-context-switching-for-developers/&#34;&gt;slows everything down&lt;/a&gt; and makes everyone more anxious.&lt;/li&gt;
&lt;li&gt;‚è≥¬†Many changes may be making their way into &lt;code&gt;main&lt;/code&gt; while a PR remains open. The cost of integrating the stagnant PR skyrockets, and so does the risk of introducing somewhat incompatible changes that end up causing a regression. So much has changed in the meantime! High-performing teams tend to have a low &lt;a href=&#34;https://cloud.google.com/blog/products/devops-sre/using-the-four-keys-to-measure-your-devops-performance&#34;&gt;&lt;em&gt;lead time for changes&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;üö¢¬†&lt;em&gt;&lt;a href=&#34;https://cloud.google.com/blog/products/devops-sre/using-the-four-keys-to-measure-your-devops-performance&#34;&gt;Deployment frequency&lt;/a&gt;&lt;/em&gt; also plummets. Each deployment ships more changes, increasing the risk of an outage and the difficulty of identifying the root cause.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-solution&#34;&gt;üßØ¬†The solution&lt;/h2&gt;
&lt;p&gt;So how might you fix the problem?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;üéØ¬†Set clear expectations for what is more valuable, time to PR or actual value delivered. Then, give feedback 1-1.&lt;/li&gt;
&lt;li&gt;ü•á¬†Reward delivering value to end-users. Praise individuals and teams who do so publicly and ensure real impact directly translates into better performance evaluations.&lt;/li&gt;
&lt;li&gt;ü§î¬†&lt;a href=&#34;./help-engineers-understand-the-why/&#34;&gt;Make sure engineers understand the Why&lt;/a&gt; of the work they are doing. That will help them focus on what matters most.&lt;/li&gt;
&lt;li&gt;üí¨¬†Having sync tech discussions, &lt;a href=&#34;https://en.wikipedia.org/wiki/Request_for_Comments&#34;&gt;RFCs&lt;/a&gt; or pairing sessions will help increase consensus before folks even create PRs. This is especially key for non-trivial tasks.&lt;/li&gt;
&lt;li&gt;üó∫Ô∏è¬†Make sure you have a &lt;a href=&#34;./series/technology-strategy/&#34;&gt;solid technology strategy&lt;/a&gt; to guide your team to make awesome decisions.&lt;/li&gt;
&lt;li&gt;‚úÖ¬†When the discussion is about code formatting, it is a clear sign you need to use a linter and code formatter like eslint and prettier.&lt;/li&gt;
&lt;li&gt;üß≠¬†Having team-wide standards for writing UI components or implementing unit tests also helps get everyone on the same page.&lt;/li&gt;
&lt;li&gt;üìö Make the team aware of the impact long PRs have. The points outlined above are a good starting point!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;üôå¬†Thanks for reading! Let me know whether you found the article useful or if you have used a different strategy to make sure PRs in your team are healthy.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>The Plot technology strategy</title>
      <link>https://saltares.com/the-plot-technology-strategy/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://saltares.com/the-plot-technology-strategy/</guid>
      <description>I wrote this article as part of my role as VP Engineering at Plot. I wanted to share it here as an example of what a technology strategy could look like. It was our best guess at the time and by no means perfect!
At Plot, we want a world in which technology enables everyone to design learning experiences that accelerate human thought, action &amp;amp; achievement.
That is our product vision.</description>
      <content>&lt;p&gt;
  &lt;img src=&#34;./img/plot/plot-logo.png&#34; alt=&#34;Plot logo&#34;&gt;

&lt;/p&gt;
&lt;p&gt;I wrote this article as part of my role as &lt;a href=&#34;https://www.plot.co/about-us&#34;&gt;VP Engineering at Plot&lt;/a&gt;. I wanted to share it here as an example of what a technology strategy could look like. It was our best guess at the time and by no means perfect!&lt;/p&gt;
&lt;p&gt;At &lt;a href=&#34;https://plot.co/&#34;&gt;Plot&lt;/a&gt;, we want &lt;em&gt;a world in which technology enables everyone to design learning experiences that accelerate human thought, action &amp;amp; achievement&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;That is our &lt;strong&gt;product vision&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Our &lt;strong&gt;product mission&lt;/strong&gt; is to achieve this vision with software.&lt;/p&gt;
&lt;h2 id=&#34;-gathering-context&#34;&gt;üåç Gathering context&lt;/h2&gt;
&lt;p&gt;The technology vision &amp;amp; strategy is at the service of the product one, so that was the natural starting point. We will build software that enables everyone to design learning experiences that accelerate human thought, action &amp;amp; achievement.&lt;/p&gt;
&lt;p&gt;Next, I looked at the time horizon. How long-term should our strategy be? Should we plan for one year? 2? 10? Given our early stage, I set a 1-year horizon.&lt;/p&gt;
&lt;p&gt;What followed was a context-gathering exercise involving conversations with team members in and outside of engineering.&lt;/p&gt;
&lt;h2 id=&#34;-problems-and-opportunities&#34;&gt;ü§î Problems and opportunities&lt;/h2&gt;
&lt;p&gt;Thinking about the challenges ahead will help us de-risk and overcome them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Small Engineering team&lt;/strong&gt;. 4 individual contributor software engineers (ICs) and one manager. Capacity is limited, but the reduced communication overhead and blank slate will help the team move fast.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The team has to build the entire product. Fast.&lt;/strong&gt; On the one hand, there is no technical debt, and we can explore a more modern tech stack. On the other hand, there is a lot to be built quickly.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;High uncertainty&lt;/strong&gt;. This uncertainty comes from the fact that we&amp;rsquo;re an early-stage startup whose product will have a high rate of change.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;-goals&#34;&gt;üéØ Goals&lt;/h2&gt;
&lt;p&gt;What goals do we need to hit to make significant progress toward our vision?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ten users have tested our tech product by the end of Q1.&lt;/li&gt;
&lt;li&gt;Create the technology mechanisms that enable the Product team to move fast and change direction after testing.&lt;/li&gt;
&lt;li&gt;Craft a tech product that feels great to use because of its performance and UX.&lt;/li&gt;
&lt;li&gt;Enable a data-driven culture at Plot. Everyone can self-serve user analytics to make decisions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;-roadmap&#34;&gt;üõ£Ô∏è Roadmap&lt;/h2&gt;
&lt;p&gt;What are we aiming to build?&lt;/p&gt;
&lt;p&gt;During Q1 2022, we will build a slice of our tech product, which will allow learning designers to create and sequence content, activities, and assessments.&lt;/p&gt;
&lt;p&gt;Once we put the product in front o users, gather feedback and run more interviews, we will decide what comes beyond. It&amp;rsquo;s okay. We accept that uncertainty is high now and are ready for that!&lt;/p&gt;
&lt;h2 id=&#34;-strengths-and-weaknesses-of-engineering&#34;&gt;üìä Strengths and weaknesses of engineering&lt;/h2&gt;
&lt;p&gt;What skillset and expertise do we currently have? What are we missing? Teams with a clear insight into this will be better equipped to plan and align company needs to folks&amp;rsquo; development interests.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Strengths&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Great collective experience building successful products from scratch in high uncertainty environments.&lt;/li&gt;
&lt;li&gt;The team has already worked together at &lt;a href=&#34;https://www.aula.education/&#34;&gt;Aula&lt;/a&gt;. We are not a group of people who know nothing about each other and have never collaborated.&lt;/li&gt;
&lt;li&gt;As we have a blank slate, there is no technical debt accumulated.&lt;/li&gt;
&lt;li&gt;We are not constrained by a particular technology stack.&lt;/li&gt;
&lt;li&gt;We have a diverse set of individuals with different educational backgrounds. &lt;a href=&#34;https://hbr.org/2016/11/why-diverse-teams-are-smarter&#34;&gt;Diverse and inclusive teams build better products&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Weaknesses&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The team comes from Aula, a company at a very different stage, with a product already used in production with paying customers. The new context requires a mindset shift from everybody.&lt;/li&gt;
&lt;li&gt;Some team members are learning small parts of our tech stack. There will be a learning curve, and we will make mistakes along the way. We expect the boost from the choices to make up for this within a short enough time frame.&lt;/li&gt;
&lt;li&gt;We are all full-stack engineers. On average, there is a slight skew towards the front-end. Back-end and infrastructure knowledge is not spread enough.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;-principles&#34;&gt;üôå Principles&lt;/h2&gt;
&lt;p&gt;Following the above context, we established a basic set of principles.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spend close to 100% of our time building the actual product.&lt;/li&gt;
&lt;li&gt;Short feedback loops lead to quality and velocity.&lt;/li&gt;
&lt;li&gt;No technical debt is a bad thing.&lt;/li&gt;
&lt;li&gt;Push complexity as much into the future as possible.&lt;/li&gt;
&lt;li&gt;Tools and practices that lead to a pit of success.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;-the-vision&#34;&gt;üî≠ The vision&lt;/h1&gt;
&lt;p&gt;We landed on the following technology vision with all of that context, which we believe will lead us to realise the product vision.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;An Engineering team that can move lightning fast to create and continuously deliver a high-quality technology tool that makes anybody a world-class learning designer.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;-the-strategy&#34;&gt;‚õµ The strategy&lt;/h1&gt;
&lt;p&gt;The following areas will help us become a team that can move lightning fast to create and deliver a high-quality technology tool that makes anybody a world-class learning designer.&lt;/p&gt;
&lt;h2 id=&#34;-infrastructure-as-a-service&#34;&gt;‚öôÔ∏è Infrastructure as a service&lt;/h2&gt;
&lt;p&gt;We will invest heavily in &lt;a href=&#34;https://en.wikipedia.org/wiki/Infrastructure_as_a_service&#34;&gt;Infrastructure as a Service (IaaS)&lt;/a&gt;. We are happy to pay more per unit of compute and give up some flexibility by using managed services, as long as it helps us spend close to 100% of our time building the product. This is particularly true when the service has a migration path to a cheaper, self-managed alternative.&lt;/p&gt;
&lt;p&gt;Pricing models for services like Vercel and AWS Lambda are all usage-based. Having an expensive infrastructure bill because we have too many users will be a great problem to have. Not getting enough users because the team spent weeks setting up and scaling infrastructure is unacceptable.&lt;/p&gt;
&lt;p&gt;For example, we chose &lt;a href=&#34;https://vercel.com/&#34;&gt;Vercel&lt;/a&gt; and &lt;a href=&#34;https://www.serverless.com/&#34;&gt;serverless&lt;/a&gt; because they make zero-configuration continuous deployment and scalability very easy.&lt;/p&gt;
&lt;h2 id=&#34;-continuous-deployment&#34;&gt;üö¢ Continuous deployment&lt;/h2&gt;
&lt;p&gt;Continuous deployment (&lt;strong&gt;CD&lt;/strong&gt;) means that every time a developer makes a code change, a new version of the application is deployed automatically with zero human intervention.&lt;/p&gt;
&lt;p&gt;The time between code change and a new version being deployed should ideally stay below 5 minutes.&lt;/p&gt;
&lt;p&gt;Additionally, we will leverage Continuous integration (&lt;strong&gt;CI&lt;/strong&gt;). As changes are incorporated, we run automated tests that validate them.&lt;/p&gt;
&lt;p&gt;Finally, we will use &lt;strong&gt;feature toggles&lt;/strong&gt; to deploy partially completed features without releasing them to some or any users.&lt;/p&gt;
&lt;p&gt;Some of the benefits of the practices above are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deployments are smaller, which results in a reduced risk of introducing regressions. In other words, &lt;a href=&#34;https://services.google.com/fh/files/misc/state-of-devops-2016.pdf&#34;&gt;increasing deployment frequency decreases failure rate and mean time to restore&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Feature toggles maximise the chances of having a releasable feature sooner as small batches of changes are continuously integrated into production. This means earlier feedback and re-risked projects. If we run out of time, we can decide whether or not to release what we have. Not using toggles means we must wait for features to be fully ready before integrating them into the main codebase. The integration cost skyrockets, and we will not even have the choice of releasing what we have.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to CD, we are deploying code to production over eight times a day on average.&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/plot/dora-metrics.png&#34; alt=&#34;Plot DORA metrics&#34;&gt;

&lt;/p&gt;
&lt;h2 id=&#34;-excellent-developer-experience&#34;&gt;üë©‚Äçüíª Excellent developer experience&lt;/h2&gt;
&lt;p&gt;We will not invest in complex solutions too early and strive for simplicity at all times. However, we will invest in excellent developer experience by choosing &lt;em&gt;&lt;a href=&#34;https://blog.codinghorror.com/falling-into-the-pit-of-success/&#34;&gt;pit of success&lt;/a&gt;&lt;/em&gt; tools, i.e., tools that make it very hard to do the wrong thing.&lt;/p&gt;
&lt;p&gt;Here are a few examples of what this looks like.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Monorepo for dependency management.&lt;/li&gt;
&lt;li&gt;Tests run in seconds, not minutes, with a local database.&lt;/li&gt;
&lt;li&gt;Easy to set up and work in a local environment with no network connectivity.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These practices increase developer productivity and shorten feedback loops. As a consequence:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tests are run more often, better quality tests, and fewer bugs.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s easier to make changes. Therefore batches are smaller, and the risk goes down.&lt;/li&gt;
&lt;li&gt;Developers move faster!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At the moment, a developer can set up their development environment in 15 minutes, and a build/test/deploy cycle takes 3 minutes.&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/plot/app-deploy.png&#34; alt=&#34;Plot CD pipeline&#34;&gt;

&lt;/p&gt;
&lt;h2 id=&#34;-technical-debt&#34;&gt;üè¶ Technical debt&lt;/h2&gt;
&lt;p&gt;We are a new organisation working on the first iteration of a greenfield product. Unlike us, most organisations are slowed down by piles of tech debt. There is certainly a balance to be struck between moving fast and incurring too much technical debt. As Martin Fowler writes, &lt;a href=&#34;https://martinfowler.com/bliki/TechnicalDebtQuadrant.html&#34;&gt;no technical debt at all is bad&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/plot/tech-debt.png&#34; alt=&#34;Tech debt quadrants&#34;&gt;

&lt;/p&gt;
&lt;p&gt;We will ensure that the debt we incur falls within the &lt;strong&gt;Prudent&lt;/strong&gt; and &lt;strong&gt;Deliberate&lt;/strong&gt; quadrants. A few of our delivery process practices, including pairing, technical discussions, code reviews, and our definition of done, help us avoid the &lt;strong&gt;Inadvertent&lt;/strong&gt; and &lt;strong&gt;Reckless&lt;/strong&gt; quadrants.&lt;/p&gt;
&lt;p&gt;Whenever we want to address the technical debt that we do incur, we will do so in one of two ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Following the &lt;a href=&#34;https://dzone.com/articles/how-to-be-an-effective-boygirl-scout-engineer#:~:text=Most%20engineers%20have%20heard%20of,wouldn&#39;t%20deteriorate%20so%20relentlessly&#34;&gt;scout rule&lt;/a&gt; as we work on the codebase.&lt;/li&gt;
&lt;li&gt;As a &lt;a href=&#34;https://martinfowler.com/articles/preparatory-refactoring-example.html&#34;&gt;preparatory refactor&lt;/a&gt;. Since preparatory refactors can take a bit more time, they require the team&amp;rsquo;s agreement, including PM and Design.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;-ui-strategy&#34;&gt;üíé UI strategy&lt;/h2&gt;
&lt;p&gt;Plot will have a rich UI that needs to feel great to use and have a consistent aesthetic. Our technology choices must enable us to move super fast, as time to market is of the essence, and feedback can potentially result in significant changes.&lt;/p&gt;
&lt;p&gt;Our bet is &lt;a href=&#34;https://tailwindcss.com/&#34;&gt;TailwindCSS&lt;/a&gt; combined with &lt;a href=&#34;https://headlessui.dev/&#34;&gt;HeadlessUI&lt;/a&gt;. The consequences are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The best developer experience of any styling framework.&lt;/li&gt;
&lt;li&gt;Developers can style UIs faster.&lt;/li&gt;
&lt;li&gt;Less overhead than popular alternatives (Material UI) will help achieve faster loading times and runtime performance.&lt;/li&gt;
&lt;li&gt;Higher consistency as long as we are disciplined about theme usage.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Pit of success&lt;/em&gt; for accessibility.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;-a-trust-based-inclusive-team-that-is-continuously-improving&#34;&gt;ü§ó A trust-based inclusive team that is continuously improving&lt;/h2&gt;
&lt;p&gt;We are fortunate enough to have a diverse engineering team in a few ways, including educational backgrounds. As we build an ed-tech product, this can be a &lt;a href=&#34;https://hbr.org/2016/11/why-diverse-teams-are-smarter&#34;&gt;competitive advantage&lt;/a&gt;. However, taking advantage of this &lt;a href=&#34;https://lauratacho.medium.com/recruiting-more-underrepresented-candidates-wont-magically-make-your-organisation-inclusive-96651c6fb4b8&#34;&gt;does not happen by default&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Through strong but loosely held opinions and recognising our mix of expertise, we will make better decisions and reach better outcomes. Truly listening, allowing others to voice their opinions, and sharing knowledge are part of the core expectations of engineers in the team.&lt;/p&gt;
&lt;p&gt;We commit to regular retrospectives to continuously iterate and perfect how we work together to achieve our goals.&lt;/p&gt;
&lt;p&gt;Individuals in the team will frequently pair to share knowledge, learn from one another and streamline development as no peer review is required in those cases.&lt;/p&gt;
&lt;h2 id=&#34;-user-analytics&#34;&gt;üìà User analytics&lt;/h2&gt;
&lt;p&gt;At Plot, we want to foster a data-informed culture, where anyone in the company can self-serve usage data from our tech product to inform their decisions. Be it making changes to the tech product itself or deciding on copy for the marketing website. At the same time, we don&amp;rsquo;t want to spend any time at all, if possible, setting up a custom analytics pipeline.&lt;/p&gt;
&lt;p&gt;We are taking a few actions to achieve this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://amplitude.com/&#34;&gt;Amplitude&lt;/a&gt; will be our user analytics tool. It&amp;rsquo;s an off-the-shelf solution, easy to learn, and everyone in the company will have access to it.&lt;/li&gt;
&lt;li&gt;Analytics is part of our Definition of done. We discuss the questions we want answers to during refinement.&lt;/li&gt;
&lt;li&gt;We will not use auto-tracking to solve the &lt;em&gt;&amp;ldquo;we forgot to track this&amp;rdquo;&lt;/em&gt; problem because it still requires someone to sift through events to tag them, and they are incredibly brittle to app design changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;üôå Hope this was useful.&lt;/p&gt;
&lt;p&gt;It was amazing to see the team come together, show exceptional ownership, and make critical technical decisions based on the principles we set. Solid strategy and principles genuinely are one of the most effective ways you can scale yourself!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>4 steps to create a solid technology strategy</title>
      <link>https://saltares.com/4-steps-to-create-a-solid-technology-strategy/</link>
      <pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://saltares.com/4-steps-to-create-a-solid-technology-strategy/</guid>
      <description>By Anastasia Petrova on Unsplash As an Engineering leader, you want to create a solid technology strategy to provide the context your team needs to make excellent decisions. But how should you go about it?
üìö 1. Gather context Most of the difficulty resides in identifying and reflecting on the context of the business and your team. Once you do that, you will realise that actually writing a strategy doc is the easy part.</description>
      <content>&lt;p&gt;
  &lt;figure&gt;
    &lt;img class=&#34;figure-image&#34; src=&#34;./img/man-holding-compass.jpg&#34; alt=&#34;Man holding compass&#34;&gt;
    &lt;figcaption&gt;By Anastasia Petrova on &lt;a href=&#34;https://unsplash.com/photos/xu2WYJek5AI&#34;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;

&lt;/p&gt;
&lt;p&gt;As an Engineering leader, you want to create a solid technology strategy to provide &lt;a href=&#34;./the-importance-of-solid-technology-strategy-and-principles/&#34;&gt;the context your team needs to make excellent decisions&lt;/a&gt;. But how should you go about it?&lt;/p&gt;
&lt;h2 id=&#34;-1-gather-context&#34;&gt;üìö 1. Gather context&lt;/h2&gt;
&lt;p&gt;Most of the difficulty resides in identifying and reflecting on the context of the business and your team. Once you do that, you will realise that actually writing a strategy doc is the easy part.&lt;/p&gt;
&lt;h3 id=&#34;business-goals-and-strategy&#34;&gt;Business goals and strategy&lt;/h3&gt;
&lt;p&gt;Your technology strategy must serve the wider business goals and not the other way around. Take a look at what your organisation needs to achieve next quarter or year. Perhaps you are in the middle of a &lt;a href=&#34;https://www.investopedia.com/terms/b/btob.asp&#34;&gt;B2B&lt;/a&gt; to &lt;a href=&#34;https://www.investopedia.com/terms/b/btoc.asp&#34;&gt;B2C&lt;/a&gt; transition, or everyone is getting ready to launch in the US.&lt;/p&gt;
&lt;p&gt;Of course, if this is not clear, you have much bigger problems üôÉ.&lt;/p&gt;
&lt;h3 id=&#34;current-team&#34;&gt;Current team&lt;/h3&gt;
&lt;p&gt;Everyone knows what needs to be achieved, now it‚Äôs time to take a look at whether you have the right team to do it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Size&lt;/strong&gt;: will you need to hire or reduce the scope?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Skills&lt;/strong&gt;: alright, that new iOS app sounds great, but has anyone built one before? Are you going to provide training or hire a specialist?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Strengths&lt;/strong&gt;: think about what the team does really well and lean on that to reduce risk. Perhaps it so happens that folks in your team are the target audience for your product. Make sure their thoughts are heard in product discussions!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Weaknesses&lt;/strong&gt;: what does the team struggle with? Perhaps all the knowledge of a particular area of the system is concentrated in a single individual. What can you do to share knowledge more effectively?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;current-technology-and-processes&#34;&gt;Current technology and processes&lt;/h3&gt;
&lt;p&gt;It is really important you have a good grasp of how your engineering team operates. What is working? Where is the friction?&lt;/p&gt;
&lt;p&gt;Perhaps communication is great, folks pair regularly and there rarely is any misalignment on requirements after a refinement session. It may be that the team finds the current release process frustrating or the current on-call rotation quite stressful.&lt;/p&gt;
&lt;p&gt;Take your time really understanding what makes the team tick as your strategy will be highly dependent on it. A good tool to get data across teams is running quarterly &lt;a href=&#34;https://engineering.atspotify.com/2014/09/squad-health-check-model/&#34;&gt;team health surveys&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;company-values-and-operating-principles&#34;&gt;Company values and operating principles&lt;/h3&gt;
&lt;p&gt;Think about the values in your organisation and how the company operates. Ideally, you‚Äôd want a strategy that reflects that.&lt;/p&gt;
&lt;h3 id=&#34;establish-the-horizon&#34;&gt;Establish the horizon&lt;/h3&gt;
&lt;p&gt;How far into the future should you look when creating your strategy? It depends! If you choose too short a timeframe, your strategy will change constantly and the team will lack continuity. In turn, looking too far into the future may render the strategy irrelevant fairly quickly.&lt;/p&gt;
&lt;p&gt;For an early stage startup, you may want to look at a horizon of up to a year while later stage organisations may work better with plans north of a year. Is the company about to go through a major event such as a merger or a new round of investment that may alter goals significantly? You may want to take this into account as well.&lt;/p&gt;
&lt;h2 id=&#34;-2write-a-draft&#34;&gt;‚úçÔ∏è 2.¬†Write a draft&lt;/h2&gt;
&lt;p&gt;Get started writing an initial draft. I recommend a proper document instead of a slide deck, so that you can convey nuances more clearly.&lt;/p&gt;
&lt;p&gt;When talking about architecture, it is useful to include diagrams of current vs future state. Avoid being too prescriptive, you are trying to provide context so that your team can make decisions. You are not making every decision by yourself.&lt;/p&gt;
&lt;p&gt;In terms of document structure, I find it useful to take the reader through the thought process that led you to the strategy itself.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Link to &lt;strong&gt;overall business strategy&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Product goals&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Team context&lt;/strong&gt;: size, strengths and weaknesses, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Engineering principles&lt;/strong&gt;: these are meant to be general guidelines to help decision making. Take a look at a couple of examples from &lt;a href=&#34;https://monzo.com/blog/2018/06/29/engineering-principles&#34;&gt;Monzo&lt;/a&gt; and &lt;a href=&#34;https://www.thoughtworks.com/insights/blog/what-are-our-core-values-and-practices-building-software&#34;&gt;Thoughtworks&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Technology and architecture vision&lt;/strong&gt;: remember to avoid being prescriptive. In this section you can detail direction of travel. For example, the team is moving from containers on EC2 to a serverless architecture. In some cases, it may be useful to compile a list of accepted technologies so as to ensure consistency within larger organisations.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;-3get-feedback--iterate&#34;&gt;‚ôªÔ∏è 3.¬†Get feedback &amp;amp; iterate&lt;/h2&gt;
&lt;p&gt;Share the document with the folks you want feedback from. Typically, this will be your manager, the rest of the leadership team and some individuals in Engineering. Google docs works best because everyone can give feedback async.&lt;/p&gt;
&lt;p&gt;Feedback will help you clarify confusing elements and cover areas you omitted. It will also surface misalignment people had regarding goals, context or general direction of travel. Better to find these out early!&lt;/p&gt;
&lt;p&gt;One important thing to remember is that your strategy will never be perfect. It‚Äôs better to &lt;strong&gt;ship it with confidence&lt;/strong&gt; and be completely transparent about the fact that it is your current best guess and that you will all improve it together over time.&lt;/p&gt;
&lt;h2 id=&#34;-4communicate-it&#34;&gt;üí¨ 4.¬†Communicate it&lt;/h2&gt;
&lt;p&gt;Your strategy will be of no use if nobody knows about it or is ignored. You have to communicate it effectively. Here are a few tips.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The full document should be easily accessible to everyone in the company. Normally this means Notion or whatever wiki you use.&lt;/li&gt;
&lt;li&gt;Reference the strategy in team meetings, 1-1 sessions and technology discussions. Repetition helps.&lt;/li&gt;
&lt;li&gt;Share the key points of your technology strategy with the broader organisation. This time a short slide deck may be best.&lt;/li&gt;
&lt;li&gt;Make the full document part of engineering onboarding. This will help new joiners get on the same page much faster.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;üôå¬†Thanks for reading. Hopefully, these 4 steps have demystified the process of building a technology strategy. Would love to hear your thoughts on the article or if you have a different process.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>The importance of solid technology strategy and principles</title>
      <link>https://saltares.com/the-importance-of-solid-technology-strategy-and-principles/</link>
      <pubDate>Mon, 23 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://saltares.com/the-importance-of-solid-technology-strategy-and-principles/</guid>
      <description>By Nick on Unsplash A solid technology strategy is a requirement for building a high-performing engineering organisation that consistently hits business goals. To better understand the importance of technology strategy, we can look at what happens to teams that don‚Äôt have one.
It is pretty standard for poor engineering leaders not to have a technology strategy written down and shared with the entire organisation.
Engineering leaders don‚Äôt need to think about strategy, and they can come up with a different one every day.</description>
      <content>&lt;p&gt;
  &lt;figure&gt;
    &lt;img class=&#34;figure-image&#34; src=&#34;./img/woman-looking-at-map.jpg&#34; alt=&#34;Woman looking at map&#34;&gt;
    &lt;figcaption&gt;By Nick on &lt;a href=&#34;https://unsplash.com/photos/1tpLdmxki-c&#34;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;

&lt;/p&gt;
&lt;p&gt;A solid technology strategy is a requirement for building a high-performing engineering organisation that consistently hits business goals. To better understand the importance of technology strategy, we can look at what happens to teams that don‚Äôt have one.&lt;/p&gt;
&lt;p&gt;It is pretty standard for poor engineering leaders not to have a technology strategy written down and shared with the entire organisation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Engineering leaders don‚Äôt need to think about strategy, and they can come up with a different one every day.&lt;/li&gt;
&lt;li&gt;Because there is no single source of truth for the strategy, it is harder to hold the leader accountable.&lt;/li&gt;
&lt;li&gt;The leader needs to join every single conversation. The lack of clarity becomes a massive blocker. Two things can happen: either the leader burns out or the team grinds to a halt. In any case, the leader will not be able to focus on the things only they can do.&lt;/li&gt;
&lt;li&gt;Decisions based on an unclear or inexistent strategy will be inconsistent and push teams in different directions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have been &lt;a href=&#34;./5-mistakes-i-have-made-as-an-engineering-leader/&#34;&gt;guilty&lt;/a&gt; of this in the past. Unfortunately, it seems to be more common than you‚Äôd think for companies not to have clear and easily reference-able technology strategies.&lt;/p&gt;
&lt;p&gt;Imagine a team that needs to add rich text editing to their web application. An engineer goes ahead and researches what the potential alternatives are. Their work output should be a walkthrough of their findings plus a recommendation. The team will review async and then get together to reach a final decision. The research becomes significantly more chaotic and stressful without a solid technology strategy.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What should the criteria even be?&lt;/li&gt;
&lt;li&gt;Are we okay with paying for a solution? Where do we stand on build vs buy?&lt;/li&gt;
&lt;li&gt;Do we care more about customisation or speed of integration?&lt;/li&gt;
&lt;li&gt;Do we prioritise stability over feature-set?&lt;/li&gt;
&lt;li&gt;How do we feel about depending on new open-source software? Will we become maintainers?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How can they possibly make a sane recommendation that is consistent with the direction the team is moving in?&lt;/p&gt;
&lt;p&gt;In contrast, what does it feel like when you set a clear and public technology strategy?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All of a sudden, you have more time on your calendar. No need to be pulled into every technical conversation. You are scaling yourself as a leader!&lt;/li&gt;
&lt;li&gt;Individuals in your team are empowered to make decisions. As a result, &lt;a href=&#34;https://themanagershandbook.com/working-as-a-team/decision-making#getting-buy-in&#34;&gt;the level of buy-in increases dramatically&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Engagement goes up because individuals encounter many more growth opportunities. Bad attrition goes down!&lt;/li&gt;
&lt;li&gt;In organisations with multiple teams, everyone starts rowing in the same direction. Impact of initiatives compounds.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A team that feels like the above sounds like a pretty good place to be in, doesn‚Äôt it? Of course, a solid technology strategy is not a sufficient condition to create such an environment. You need a culture of inclusion, trust and a few other ingredients. The plan is not enough, but it certainly is necessary.&lt;/p&gt;
&lt;p&gt;Perhaps in the future, I may write about how to construct a solid technology strategy and communicate it with the rest of the organisation.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>10x developers really exist</title>
      <link>https://saltares.com/10x-developers-really-exist/</link>
      <pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://saltares.com/10x-developers-really-exist/</guid>
      <description>Since the original 1968 article, &amp;ldquo;*Exploratory experimental studies comparing online and offline programming performance&amp;rdquo;*, there has been a lot of debate around the figure of the 10x developer. We‚Äôre talking about engineers who are an order of magnitude &amp;ldquo;better&amp;rdquo; than their peers by whatever measure.
These engineers exist, but not in the way most people describe them.
Typically, the stories describe them as those who:
Can close 10 times more Jira issues.</description>
      <content>&lt;p&gt;
  &lt;img src=&#34;./img/hacker-typer.gif&#34; alt=&#34;Screencast of hacker typer&#34;&gt;

&lt;/p&gt;
&lt;p&gt;Since the original 1968 article, &amp;ldquo;&lt;a href=&#34;https://dl.acm.org/doi/10.1145/362851.362858&#34;&gt;*Exploratory experimental studies comparing online and offline programming performance&lt;/a&gt;&amp;rdquo;*, there has been a lot of debate around the figure of the 10x developer. We‚Äôre talking about engineers who are an order of magnitude &lt;em&gt;&amp;ldquo;better&amp;rdquo;&lt;/em&gt; than their peers by whatever measure.&lt;/p&gt;
&lt;p&gt;These engineers exist, but not in the way most people describe them.&lt;/p&gt;
&lt;p&gt;Typically, the stories describe them as those who:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can close 10 times more Jira issues.&lt;/li&gt;
&lt;li&gt;Complete 10 times more story points.&lt;/li&gt;
&lt;li&gt;Write 10 times more lines of code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately, there are a few shortcomings. These two posts describe them eloquently, give them a read.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&amp;quot;&lt;a href=&#34;https://www.simplethread.com/the-10x-programmer-myth/&#34;&gt;The 10x programmer myth&lt;/a&gt;&amp;quot;&lt;/em&gt; by Justin Etheredge.&lt;/li&gt;
&lt;li&gt;&amp;ldquo;&lt;em&gt;&lt;a href=&#34;https://www.freecodecamp.org/news/we-fired-our-top-talent-best-decision-we-ever-made-4c0a99728fde/&#34;&gt;We fired our top talent. Best decision we ever made&lt;/a&gt;&amp;rdquo;&lt;/em&gt; by Jonathan Sol√≥rzano-Hamilton.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can summarise these damaging traits as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They work in isolation and lack self-awareness. They are never wrong.&lt;/li&gt;
&lt;li&gt;They become the only person who knows about an increasingly large number of systems. That decreases the &lt;a href=&#34;https://en.wikipedia.org/wiki/Bus_factor&#34;&gt;bus factor&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;All of a sudden, every technical decision and question goes through them and they become a dangerous bottleneck.&lt;/li&gt;
&lt;li&gt;They are good technically, but they don‚Äôt coach nor mentor and so the team misses on great growth opportunities.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=JZ017D_JOPY&#34;&gt;Linus Torvalds‚Äô &amp;ldquo;abrasive&amp;rdquo; behavior&lt;/a&gt; comes to mind. Cassidy also characterises the 10x developer quite effectively.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Life as a 10x engineer &lt;a href=&#34;https://t.co/bdsHTw0QEv&#34;&gt;pic.twitter.com/bdsHTw0QEv&lt;/a&gt;&lt;/p&gt;&amp;mdash; Cassidy (@cassidoo) &lt;a href=&#34;https://twitter.com/cassidoo/status/1150170262228201472?ref_src=twsrc%5Etfw&#34;&gt;July 13, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;

&lt;p&gt;It doesn‚Äôt sound like a massive win for a development team to have such an individual in their ranks. So&amp;hellip; how come I think the 10x developer actually exists?&lt;/p&gt;
&lt;p&gt;Developers who scale themselves by making everyone in the team better often become 10x developers. Their traits and behaviors are quite different from those traditionally attributed to the classical 10x developer.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Excellent communication skills, both written and verbal.&lt;/li&gt;
&lt;li&gt;They build trust through transparency and vulnerability.&lt;/li&gt;
&lt;li&gt;A regular part of their job is to coach other team members through coffee chats, workshops, or 1-1s.&lt;/li&gt;
&lt;li&gt;They facilitate participation from everyone and truly listen to their ideas, making them feel safe and valued.&lt;/li&gt;
&lt;li&gt;They have strong opinions, loosely held.&lt;/li&gt;
&lt;li&gt;They constantly look for new things to learn.&lt;/li&gt;
&lt;li&gt;They regularly sponsor initiatives to iteratively improve the team and encourage others to do the same.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Building software products is a deeply collaborative activity. Team performance grows exponentially when your developers have a strong technical foundation, are excellent collaborators, and trust each other. No lone wolf wonder-genius can scale themselves to that level by hacking away in a cave. It‚Äôs just impossible.&lt;/p&gt;
&lt;p&gt;Engineering leaders play a key role in fostering a culture where these traits are celebrated and become part of the core expectations of all developers in the team. It is essential the incentive system is aligned with the kind of team you want to build. When lone wolves who routinely work evenings and weekends are the ones getting pay raises and promotions, you will get a burnt-out team who don‚Äôt trust each other. When you make a habit of giving shout-outs and promotions to folks who helped the collective improve, you will reap the benefits tenfold.&lt;/p&gt;
&lt;p&gt;10x developers really exist, they make everyone else in the team better.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Behind the scenes of Plot‚Äôs Learning Design Platform</title>
      <link>https://saltares.com/behind-the-scenes-of-plots-learning-design-platform/</link>
      <pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://saltares.com/behind-the-scenes-of-plots-learning-design-platform/</guid>
      <description>At Plot, we‚Äôre building a Learning Design Platform that enables companies to rapidly scale the design of high-quality learning experiences by helping learning designers to make better design decisions faster.
It took our small team about three months to create a prototype of the platform. As with all early-stage startups, we did this in an environment of high uncertainty, making some technology choices a bit tricky. That‚Äôs where our guiding principles come in - our principles are what enable us to make the best decisions for our customers and our business even when faced with great uncertainty.</description>
      <content>&lt;p&gt;
  &lt;img src=&#34;./img/plot/plot-logo.png&#34; alt=&#34;Plot logo&#34;&gt;

&lt;/p&gt;
&lt;p&gt;At &lt;a href=&#34;https://www.plot.co/&#34;&gt;Plot&lt;/a&gt;, we‚Äôre building a Learning Design Platform that enables companies to rapidly scale the design of high-quality learning experiences by helping learning designers to make better design decisions faster.&lt;/p&gt;
&lt;p&gt;It took our small team about three months to create a prototype of the platform. As with all early-stage startups, we did this in an environment of high uncertainty, making some technology choices a bit tricky. That‚Äôs where our guiding principles come in - our principles are what enable us to make the best decisions for our customers and our business even when faced with great uncertainty.&lt;/p&gt;
&lt;h3 id=&#34;-our-principles&#34;&gt;üôå Our Principles&lt;/h3&gt;
&lt;p&gt;Right at the beginning, we set the following principles to help everyone on the team make technology decisions that supported our goals and ensured we were progressing in the same direction.
We agreed that we would:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spend close to 100% of our time building the actual product&lt;/li&gt;
&lt;li&gt;Create short feedback loops  to ensure quality and velocity&lt;/li&gt;
&lt;li&gt;Push complexity as much into the future as possible&lt;/li&gt;
&lt;li&gt;Fall into the &lt;a href=&#34;https://blog.codinghorror.com/falling-into-the-pit-of-success/&#34;&gt;Pit of Success&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Prioritize User Experience (UX) and Developer Experience (DX)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;-the-stack&#34;&gt;‚öôÔ∏è The Stack&lt;/h2&gt;
&lt;p&gt;Let‚Äôs dive into the stack that laid the foundations of our technology platform.&lt;/p&gt;
&lt;h3 id=&#34;-typescript&#34;&gt;‚å®Ô∏è Typescript&lt;/h3&gt;
&lt;p&gt;We write all our code in &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;Typescript&lt;/a&gt;, with no Javascript allowed. We made this choice for a few reasons. They were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The team was already familiar with both languages, so there was no steep learning curve.&lt;/li&gt;
&lt;li&gt;The DX the tooling gave us was world-class.&lt;/li&gt;
&lt;li&gt;We caught a lot of silly type-related bugs early which saved time.&lt;/li&gt;
&lt;li&gt;Using the same language across the stack simplified the toolchain.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, the Javascript/Node.js/Typescript ecosystem is &lt;a href=&#34;https://insights.stackoverflow.com/survey/2021#technology-most-popular-technologies&#34;&gt;incredibly popular&lt;/a&gt; and Typescript is one of the &lt;a href=&#34;https://insights.stackoverflow.com/survey/2021#technology-most-loved-dreaded-and-wanted&#34;&gt;most loved technologies&lt;/a&gt;, according to the Stack Overflow Developer survey 2021. So, finding answers to problems was a breeze!&lt;/p&gt;
&lt;h3 id=&#34;-infrastructure-as-code&#34;&gt;üèóÔ∏è Infrastructure as Code&lt;/h3&gt;
&lt;p&gt;We use &lt;a href=&#34;https://www.terraform.io/&#34;&gt;Terraform&lt;/a&gt; to declare our infrastructure components. That way, our environments are easily reproducible; we can spin them up in a matter of minutes. Additionally, all infrastructure changes go through the same peer-review and CI/CD pipeline as the rest of the system.&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/plot/terraform-plan.png&#34; alt=&#34;Terraform plan&#34;&gt;

&lt;/p&gt;
&lt;h3 id=&#34;-nextjs---the-full-stack-framework&#34;&gt;üöÄ Next.js - The Full-stack Framework&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt; is &lt;em&gt;the&lt;/em&gt; full-stack framework for React applications. Having an opinionated framework that takes care of routing and API endpoints, which fits very well with Typescript and does server-side rendering, and has great DX allows us to focus on actually building the application. Not having to worry about configuring Webpack is liberating.&lt;/p&gt;
&lt;p&gt;The entire team had plenty of experience with React, so adopting Next.js was a straightforward step.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://remix.run/&#34;&gt;Remix&lt;/a&gt; became generally available shortly after we started and it seems spectacular. However, we‚Äôre pretty happy with Next.js still. Next.js is battle-tested, mature, and has a very active community.&lt;/p&gt;
&lt;h3 id=&#34;-storage&#34;&gt;üöõ Storage&lt;/h3&gt;
&lt;p&gt;For our persistent data layer, we chose &lt;a href=&#34;https://www.prisma.io/&#34;&gt;Prisma&lt;/a&gt; with &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt;. Prisma is an outstanding tool that helped us move much faster. We enjoyed the hassle-free migrations, but we were blown away by the type safety and the autocomplete for writing queries.&lt;/p&gt;
&lt;p&gt;We knew our data was going to be mostly relational. That is why we chose PostgreSQL over &lt;a href=&#34;https://www.mongodb.com/&#34;&gt;MongoDb&lt;/a&gt;. Thanks to its JSON support, PostgreSQL is versatile and it would adapt well to document-like records if ever needed. PostgreSQL is 99.9% likely to meet our needs!&lt;/p&gt;
&lt;p&gt;Using &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt;, we ran a persistent database for local development and a non-persistent one for integration tests using Docker Compose.&lt;/p&gt;
&lt;h3 id=&#34;-other-app-side-technologies&#34;&gt;üåç Other App-side Technologies&lt;/h3&gt;
&lt;p&gt;We implemented our own design system using &lt;a href=&#34;https://tailwindcss.com/&#34;&gt;TailwindCSS&lt;/a&gt; and &lt;a href=&#34;https://headlessui.dev/&#34;&gt;HeadlessUI&lt;/a&gt;. TailwindCSS gave us best-in-class DX with complete freedom to make our application look neat and consistent without being too similar to &lt;a href=&#34;https://v4.mui.com/&#34;&gt;Material-UI&lt;/a&gt;. Once we became proficient with it, translating wireframes to components and screens came naturally. HeadlessUI was a ‚ÄúPit of Success‚Äù for our app to be accessible.&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/plot/plot-stories.png&#34; alt=&#34;Plot storybook&#34;&gt;

&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://react-query.tanstack.com/&#34;&gt;React Query&lt;/a&gt; helps us manage our server-side state on the client. We get cache invalidation, retries, online/offline management, request cancellation, pagination, and more with no effort at all.&lt;/p&gt;
&lt;p&gt;Plot users need to be able to collect documentation in a rich and structured way. So, we needed to provide a rich text editor, but creating a great text editing experience on the web that works well across devices is a brutal challenge. I speak &lt;a href=&#34;https://portal.aula.education/c/59-better-faster-more-accessible-aula-editor&#34;&gt;from experience&lt;/a&gt;! That is precisely why we chose &lt;a href=&#34;https://remirror.io/&#34;&gt;remirror&lt;/a&gt;, an open-source, off-the-shelf editor for React based on &lt;a href=&#34;https://prosemirror.net/&#34;&gt;Prosemirror&lt;/a&gt;. With remirror, the team had the whole, bug-free, rich text editing experience working in our app in under a week.&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/plot/remirror-editor.png&#34; alt=&#34;Plot editor&#34;&gt;

&lt;/p&gt;
&lt;p&gt;Authentication is probably one of the most critical parts of any application. It is one of the first flows users experience and a typical attack vector. We could have chosen an authentication-as-a-service provider, like &lt;a href=&#34;https://auth0.com/&#34;&gt;Auth0&lt;/a&gt;, but we decided to go with &lt;a href=&#34;https://next-auth.js.org/&#34;&gt;NextAuth.js&lt;/a&gt;. It was tremendously simple to set up and lets us heavily customize the experience. Plus, we‚Äôre able to keep all of the data.&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/plot/plot-auth.png&#34; alt=&#34;Plot login screen&#34;&gt;

&lt;/p&gt;
&lt;h3 id=&#34;-cloud-hosting&#34;&gt;‚òÅÔ∏è Cloud Hosting&lt;/h3&gt;
&lt;p&gt;The core of the Plot LXD platform lives inside the Next.js application, which we deploy to &lt;a href=&#34;https://vercel.com/&#34;&gt;Vercel&lt;/a&gt;. The automated preview and production deployments with zero configuration have been an incredible productivity boost; much better than setting up the infrastructure ourselves.&lt;/p&gt;
&lt;p&gt;We use AWS (managed by Terraform) for the infrastructure pieces we need and which are not provided by Vercel: VPCs, RDS, SES, S3, etc.&lt;/p&gt;
&lt;h3 id=&#34;-user-analytics&#34;&gt;üìà User Analytics&lt;/h3&gt;
&lt;p&gt;We knew we did not have the capacity to build and maintain a proprietary data pipeline. So, we chose &lt;a href=&#34;https://amplitude.com/&#34;&gt;Amplitude&lt;/a&gt; as our data analytics platform for a few reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generous ‚Äúfree‚Äù tier&lt;/li&gt;
&lt;li&gt;Easy to integrate with a Next.js app&lt;/li&gt;
&lt;li&gt;Ease of use (it allows anyone in the company to obtain insights from available data)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;-cicd&#34;&gt;üö¢ CI/CD&lt;/h3&gt;
&lt;p&gt;All our code lives in a monorepo (via &lt;a href=&#34;https://classic.yarnpkg.com/lang/en/docs/workspaces/&#34;&gt;yarn workspaces&lt;/a&gt;) hosted in Github. We also leverage Github issues and actions CI/CD for a more straightforward setup.&lt;/p&gt;
&lt;p&gt;A workflow kicks off when a PR is open that runs linting, unit/integration tests, and a preview deployment. Everything happens in parallel and takes less than 3 minutes.&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/plot/app-preview.png&#34; alt=&#34;Plot deploy workflow&#34;&gt;

&lt;/p&gt;
&lt;p&gt;Another workflow starts when a PR is merged to main. It deploys the application to production after all other checks have passed. Every change goes &lt;a href=&#34;https://charity.wtf/2021/02/19/how-much-is-your-fear-costing-you/&#34;&gt;from main to production in under 5 minutes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Our continuous delivery culture of fast &amp;amp; frequent deployments coupled with feature flags via &lt;a href=&#34;https://launchdarkly.com/&#34;&gt;LaunchDarkly&lt;/a&gt; has enabled us to excel at software delivery. We have been releasing over 6 times/day with a failure rate of &amp;lt;1%.&lt;/p&gt;
&lt;p&gt;
  &lt;img src=&#34;./img/plot/delivery-metrics.png&#34; alt=&#34;Plot delivery metrics&#34;&gt;

&lt;/p&gt;
&lt;h3 id=&#34;-observability&#34;&gt;üö® Observability&lt;/h3&gt;
&lt;p&gt;Software systems are bound to fail. We use the following tools to observe our application in production so we can understand how it behaves and where the problems are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://logflare.app/&#34;&gt;Logflare&lt;/a&gt; for log aggregation&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sentry.io/&#34;&gt;Sentry&lt;/a&gt; for error tracking and performance monitoring&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://honeycomb.io/&#34;&gt;Honeycomb&lt;/a&gt; for application tracing&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;-thanks-for-reading&#34;&gt;üôå Thanks for reading&lt;/h2&gt;
&lt;p&gt;I hope our stack inspires you to build great things in 2022 and that this post has provided some helpful guidance for developing a high-quality web application from the ground up!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>5 Mistakes I have made as an engineering leader</title>
      <link>https://saltares.com/5-mistakes-i-have-made-as-an-engineering-leader/</link>
      <pubDate>Mon, 18 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://saltares.com/5-mistakes-i-have-made-as-an-engineering-leader/</guid>
      <description>By Sarah Kilian on Unsplash To err is human, and I certainly have made my share of mistakes in my career as an engineering leader. Undoubtedly, I still have quite a few yet to make. Like with software incidents, it is vital to reflect and learn from mistakes, so that our system becomes more robust and we grow as professionals.
Today, I thought it would be interesting to go through 6 mistakes I have made as an engineering leader.</description>
      <content>&lt;p&gt;
  &lt;figure&gt;
    &lt;img class=&#34;figure-image&#34; src=&#34;./img/ruined_ice_cream.jpg&#34; alt=&#34;Dropped ice cream cone&#34;&gt;
    &lt;figcaption&gt;By Sarah Kilian on &lt;a href=&#34;https://unsplash.com/photos/52jRtc2S_VE&#34;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;

&lt;/p&gt;
&lt;p&gt;To err is human, and I certainly have made my share of mistakes in my career as an engineering leader. Undoubtedly, I still have quite a few yet to make. Like with software incidents, it is vital to &lt;a href=&#34;./a-template-for-great-incident-reviews&#34;&gt;reflect and learn from mistakes&lt;/a&gt;, so that our system becomes more robust and we grow as professionals.&lt;/p&gt;
&lt;p&gt;Today, I thought it would be interesting to go through 6 mistakes I have made as an engineering leader.&lt;/p&gt;
&lt;h3 id=&#34;1-skipping-1-1s&#34;&gt;1. Skipping 1-1s&lt;/h3&gt;
&lt;p&gt;Skipping 1-1s was never really a habit for me. I‚Äôve always made it a priority to be available for my team. However, I‚Äôve had reports who didn‚Äôt take enough ownership over their 1-1s. When that time of the week came, I would sometimes get a chat message:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey, I don‚Äôt have anything for 1-1 today. Shall we skip it?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We were super busy, so agreeing was highly tempting. In doing so, I was missing out on the opportunity to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Share my expectations and feedback around 1-1 ownership.&lt;/li&gt;
&lt;li&gt;Empower and motivate the individual.&lt;/li&gt;
&lt;li&gt;Set goals and maintain accountability.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Later, I learned to ask &lt;a href=&#34;https://lauratacho.com/blog/how-can-i-make-my-1-1s-less-boring&#34;&gt;better questions&lt;/a&gt;, put the individuals in the driver&amp;rsquo;s seat, and make the most of 1-1s.&lt;/p&gt;
&lt;h3 id=&#34;2-underestimating-having-a-clear-technology-strategy&#34;&gt;2. Underestimating having a clear technology strategy&lt;/h3&gt;
&lt;p&gt;Many managers dictate and involve themselves in every technical decision their teams make. I want to empower my teams to make their own decisions and genuinely have agency over the software they build, ship and maintain. However, for multiple squads to do that consistently, you need a couple of things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Excellent communication across teams/squads.&lt;/li&gt;
&lt;li&gt;A clear technology vision and strategy.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It took me too long to support my teams by sharing a clear technology vision and strategy that would become the principles on which they could base technical decisions. Once I did that, it felt like magic. We were all rowing our technology in the same direction.&lt;/p&gt;
&lt;p&gt;It doesn‚Äôt need to be too comprehensive. Just be clear about the kinds of tradeoffs you want the team to make. I will dive deeper into this one at some point with a separate article.&lt;/p&gt;
&lt;h3 id=&#34;3-not-setting-clear-expectations&#34;&gt;3. Not setting clear expectations&lt;/h3&gt;
&lt;p&gt;There have been instances where an individual was surprised when receiving feedback from me. That is usually a robust signal that expectations were not clear enough. As long as expectations are clear, folks have enough self-awareness to reflect and identify a problem after receiving feedback about something not working out great.&lt;/p&gt;
&lt;p&gt;Making the expectations of each role in your organization public is a fantastic tool.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Help everyone understand what is expected of them.&lt;/li&gt;
&lt;li&gt;Increase equity, people in the same role are not evaluated against different standards.&lt;/li&gt;
&lt;li&gt;Greater understading of what it takes to progress.&lt;/li&gt;
&lt;li&gt;When shared externally, it can be a great recruiting tool.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, you should complement this with &lt;a href=&#34;https://themanagershandbook.com/coaching-and-feedback/running-one-on-ones&#34;&gt;great 1-1 sessions&lt;/a&gt;, good cross-team understanding of roles and responsibilities, etc.&lt;/p&gt;
&lt;h3 id=&#34;4-not-hiring-engineering-managers-first&#34;&gt;4. Not hiring Engineering Managers first&lt;/h3&gt;
&lt;p&gt;Back in January 2021, I found myself in the position to increase capacity fast. To do that, I had to &lt;a href=&#34;./how-to-hire-8-engineers-in-8-weeks&#34;&gt;grow the Aula engineering team from 7 to 25 in record time&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yikes!&lt;/p&gt;
&lt;p&gt;I knew hiring Engineers was hard, but finding fantastic Engineering Managers (EMs) is much worse. In Europe, managers also tend to have longer notice periods, up to 3 months!. The pressure to increase capacity was so high that I mistakenly prioritized individual contributor (IC) roles over the manager ones.&lt;/p&gt;
&lt;p&gt;As a consequence, my team grew well beyond my management capacity. If I remember correctly, I had 15 reports at one point. I still had to do all these Engineering Manager interviews, so the quality of my feedback went down, and it became increasingly hard to help the team push in the same direction.&lt;/p&gt;
&lt;p&gt;What would have happened if I had focused on increasing managerial capacity first? Maybe short-term velocity would not have gone up, but I would have achieved a few things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Much higher hiring capacity with lower pressure on ICs.&lt;/li&gt;
&lt;li&gt;Significant improvements to feedback.&lt;/li&gt;
&lt;li&gt;Greater alignment across product squads.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-not-investing-enough-in-team-building&#34;&gt;5. Not investing enough in team building&lt;/h3&gt;
&lt;p&gt;In a rapidly growing organization, folks start working closely with other people they do not know at all. Even though everyone works hard, software delivery does not progress as expected.&lt;/p&gt;
&lt;p&gt;There is no trust.&lt;/p&gt;
&lt;p&gt;Not because you hired the wrong people, but simply because you have made no room for individuals to build trust with each other. Thanks to the feedback I received, we invested much more in getting to know each other and building that trust. The team gelled and worked much more effectively together after that.&lt;/p&gt;
&lt;p&gt;üôå Thanks for reading. Hopefully, some of these have provided you with some insight.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
