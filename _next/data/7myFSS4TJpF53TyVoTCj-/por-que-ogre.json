{"pageProps":{"metadata":{"path":"content/post/2010-10-10-%c2%bfpor-que-ogre.mdx","title":"¿Por qué Ogre?","date":"2010-10-10T12:04:08.000Z","categories":["Games development"],"series":null,"description":null,"slug":"por-que-ogre","readingTime":"5 min read","draft":false,"disableComments":false,"keywords":[],"banner":null},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    img: \"img\",\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\",\n    h3: \"h3\",\n    em: \"em\",\n    div: \"div\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.img, {\n      src: \"/img/wp/porque.webp\",\n      alt: \"porque.jpg\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Antes de decidirme a utilizar Ogre\"\n      }), \" frente a otros motores de renderizado (\", _jsx(_components.a, {\n        href: \"http://irrlicht.sourceforge.net/\",\n        children: \"Irrlicht\"\n      }), \") o incluso motores de juego completos (\", _jsx(_components.a, {\n        href: \"http://www.panda3d.org/\",\n        children: \"Panda 3D\"\n      }), \") estuve mirando lo que ofrecía cada uno. Es complicado guiarse por foros y comunidades ya que \", _jsx(_components.strong, {\n        children: \"cada uno barre para casa\"\n      }), \", a veces con un ferviente fanatismo, ya os podéis imaginar. Ni de lejos soy un experto en desarrollo de videojuegos 3D y puede que haya pasado detalles por alto pero lo que más me llamó la atención de Ogre fue su \", _jsx(_components.strong, {\n        children: \"capacidad de adaptación\"\n      }), \" a todo tipo de situaciones. Tas el salto, mis razones.\"]\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/wp/pacific-storm.webp\",\n      alt: \"pacific-storm.jpg\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Pon el piloto automático o toma el control\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"En Ogre hay \", _jsx(_components.strong, {\n        children: \"decenas de formas de hacer las cosas\"\n      }), \" dependiendo del grado de control que quieras tomar sobre el proceso. Podemos indicarle el motor que lleve a cabo determinada tarea y que lo haga con el \", _jsx(_components.strong, {\n        children: \"comportamiento por defecto\"\n      }), \" o, aunque también es posible \", _jsx(_components.strong, {\n        children: \"indicar de forma explícita decenas de parámetros\"\n      }), \" para que se comporte exactamente como deseamos. Es cierto que características como está hacen que la curva de aprendizaje tenga una pendiente abrumadora en los primeros compases. No obstante, no he visto ningún engine con \", _jsx(_components.strong, {\n        children: \"la flexibilidad de Ogre\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Podría citar muchos ejemplos en los que reluce esta filosofía como, por ejemplo, \", _jsx(_components.strong, {\n        children: \"la secuencia de inicialización de Ogre\"\n      }), \" en la que se nos presentan dos vías principales. Lo que sigue es un pequeño ejemplo pasando por alto ciertas reglas de estilo con el objetivo de no extenderme demasiado.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Método automático:\"\n      })\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"// Creamos la raíz con ficheros de plugin y configuración válidos\\nRoot* raiz = new Root(&quot;plugins.cfg&quot;, &quot;ogre.cfg&quot;, &quot;ogre.log&quot;);\\n\\n// Ventana de Ogre\\nRenderWindow* ventana;\\n\\n// Restauramos la configuración\\nraiz-&gt;restoreConfig();\\n\\n// Inicializamos la librería\\nventana = Ogre-&gt;initialize(true,&quot;SionDream - Ogre automático&quot;);\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Método manual:\"\n      })\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"// Creamos la raíz\\nRoot* raiz = new Root();\\n\\n// Ventana de Ogre\\nRenderWindow* ventana;\\n\\n// Seleccionamos el plugin de renderizado de Open GL\\nraiz-&gt;loadPlugin(&quot;RenderSystem_GL&quot;);\\nString nombreGL(&quot;OpenGL Rendering Subsystem&quot;);\\nRenderSystemList *listaRender = raiz-&gt;getAvaiableRenderers();\\nRenderSystemList::iterator i;\\nbool stop = false;\\n\\nfor (i = listaRender-&gt;begin(); i != listaRender-&gt;end() &amp;&amp; !stop; i++) {\\n    if ((*i)-&gt;getName = nombreGL) {\\n        raiz-&gt;setRenderSystem(*i);\\n        stop = true;\\n    }\\n}\\n\\nif (raiz-&gt;getRenderSystem() == NULL) {\\n    // Mensaje de error\\n    delete raiz;\\n    exit(1);\\n}\\n\\n// Inicializamos Ogre\\nraiz-&gt;initialise(false);\\n\\n// Creamos la ventana\\nventana = raiz-&gt;createRenderWindow(\\n  &quot;SionDream - Ogre inicialización manual&quot;,\\n  1280, 720,\\n  true,\\n  0\\n);\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Podríamos haber ido más allá hasta lograr \", _jsx(_components.strong, {\n        children: \"embeber una ventana de Ogre en una de QT\"\n      }), \" para conseguir un render dentro de una aplicación de diseño de interiores, por ejemplo. Parámetros como la sincronización vertical y decenas de pijadas más, pueden ser personalizados.\"]\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/wp/venetica.webp\",\n      alt: \"venetica.jpg\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Extensibilidad a través de plugins\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"La arquitectura de Ogre ofrece un \", _jsx(_components.strong, {\n        children: \"sistema de plugins\"\n      }), \" de forma que podemos sobreescribir la gestión por defecto de un subsistema por el que necesitemos. Como se ha visto en el ejemplo anterior, el propio sistema de renderizado viene en forma de plugin (Open GL o Direct3D). Ogre provee una interfaz para llevar a cabo una determinada tarea por lo que es posible proporcionar \", _jsx(_components.strong, {\n        children: \"distintas implementaciones\"\n      }), \" para dicha interfaz.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Que Ogre se base en gran parte en plugins no quiere decir que nos toque desarrollar los nuestros. \", _jsx(_components.strong, {\n        children: \"La comunidad se ha encargado de desarrollar multitud\"\n      }), \" de extensiones para efectos de partículas, colisiones, gestión del scene graph etc. Simplemente debemos escoger el que se ajuste a nuestras necesidades.\"]\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/wp/victory.webp\",\n      alt: \"victory.jpg\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Construye escenas de todo tipo\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"El SceneManager\"\n      }), \" es la interfaz que se encarga de ordenar y \", _jsx(_components.strong, {\n        children: \"gestionar el scene graph\"\n      }), \" para su renderizado entre otros. Una de las características que más me llamó la atención de Ogre fue la existencia de una gran variedad de SceneManager especializados en situaciones diferentes.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Imagina que estamos desarrollando \", _jsx(_components.strong, {\n        children: \"un título de acción\"\n      }), \" en el que nuestro protagonista debe recorrer los pasillos de una instalación acabando con monstruos procedentes de un experimento fallido, ¿alguien dijo Half-Life?. Necesitaremos representar \", _jsx(_components.strong, {\n        children: \"escenarios cerrados con una gran densidad de elementos\"\n      }), \". ¡Bien! Existe un SceneManager específico para este caso de manera que obtendremos un rendimiento mucho mayor utilizándolo.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Puede que nuestro proyecto consista en \", _jsx(_components.strong, {\n        children: \"un juego de rol\"\n      }), \" en el que nuestro héroe debe recorrer grandes extensiones de terreno acabando con criaturas mitológicas. Un mundo abierto difiere muchísimo de la instalación pasillera del caso anterior. \", _jsx(_components.strong, {\n        children: \"El escenario es cientos de veces mayor\"\n      }), \" pero precisa de menos detalle. Estamos de suerte porque en Ogre existe un plugin para gestionar entornos abiertos virtualmente infinitos.\"]\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/wp/haunted.webp\",\n      alt: \"haunted.jpg\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Multitud de features adicionales\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Ogre cuenta con muchas características adicionales listadas \", _jsx(_components.a, {\n        href: \"http://osl.uca.es/iberogre/index.php/Conociendo_Ogre3D#Caracter.C3.ADsticas\",\n        children: \"aquí\"\n      }), \" aunque en este artículo he expuesto lo que más útil y sorprendente me ha parecido. Supongo que cada uno tendrá sus features preferidas. En cualquier caso, consideraba interesante exponer en el blog las razones de mi elección las cuales c\", _jsx(_components.strong, {\n        children: \"ompensan ampliamente la empinada curva de dificultad\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Próximamente más novedades sobre IberOgre.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","scope":{}},"series":null},"__N_SSG":true}