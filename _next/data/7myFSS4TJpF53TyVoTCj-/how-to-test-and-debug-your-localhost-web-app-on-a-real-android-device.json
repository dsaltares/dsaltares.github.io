{"pageProps":{"metadata":{"path":"content/post/2021-12-29-debug-application-real-device-local-development.mdx","title":"How to test and debug your localhost web app on a real Android device","date":"2021-12-29T00:00:00.000Z","categories":["Development"],"series":null,"description":"Tutorial to develop a website locally and test on a real Android device","slug":"how-to-test-and-debug-your-localhost-web-app-on-a-real-android-device","readingTime":"3 min read","draft":false,"disableComments":false,"keywords":["web app","local development","developer experience","Android","Chrome"],"banner":null},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    ol: \"ol\",\n    code: \"code\",\n    a: \"a\",\n    div: \"div\",\n    pre: \"pre\",\n    span: \"span\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"When building cross-platform web application, you can mostly get away with working locally on your desktop browser. However, from time to time you may have to deal with a pesky bug that only happens on mobile.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The desktop browser device toolbar may not be enough to reproduce it. You may actually have to use a real device! However, you don't want to have to publish your app to a public URL every time you want to test whether a given change fixes the problem. That would be a massive pain in the butt!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Fortunately there is a simple trick you can use to be able to quickly iterate and test on a real mobile device while keeping an awesome developer experience.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"üèéÔ∏è Hot reload with instant feedback.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"üñ•Ô∏è Access to the console.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"üêõ Full debugger with breakpoints, etc.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"üì± Enable USB debugging\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"First, make sure USB debugging is enabled on your device.\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Go to \", _jsx(_components.code, {\n          children: \"Settings -> About phone\"\n        })]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Tap the build number seven times.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Enable USB debugging by going to \", _jsx(_components.code, {\n          children: \"Settings -> Developer options -> USB Debugging\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Great, now you can connect your device to your development machine via USB. You should see a notification that USB debugging is enabled.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"üöá Tunnel localhost\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Run your local development server. I am working on a \", _jsx(_components.a, {\n        href: \"https://nextjs.org/\",\n        children: \"Next.js\"\n      }), \" app, so I can just run:\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-shell\",\n        children: _jsxs(_components.code, {\n          className: \"language-shell\",\n          children: [\"$ \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"yarn\"\n          }), \" dev\\n\"]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Your web app is probably now running on \", _jsx(_components.code, {\n        children: \"localhost\"\n      }), \", but your real device cannot connect directly. In order to access your local development server from a different device we can use \", _jsx(_components.a, {\n        href: \"https://localtunnel.me/\",\n        children: \"localtunnel\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"No need to install, you can use \", _jsx(_components.code, {\n        children: \"npx\"\n      }), \" to run it directly. Make sure to tell it to tunnel to the port your local development server is using. In my case, that is \", _jsx(_components.code, {\n        children: \"3000\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-shell\",\n        children: _jsxs(_components.code, {\n          className: \"language-shell\",\n          children: [\"$ npx localtunnel \", _jsx(_components.span, {\n            className: \"token parameter variable\",\n            children: \"--port\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token number\",\n            children: \"3000\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"localtunnel\"\n      }), \" will give you a temporary URL that is accessible from anywhere in the world. In my case, I got \", _jsx(_components.code, {\n        children: \"https://little-fox-32.loca.lt\"\n      }), \". You can now open that URL in the device you want to test.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Be mindful that, running localtunnel will essentially expose your local app traffic to their public servers. Depending on what you are working on, that may be a show stopper. In any case, \", _jsx(_components.a, {\n        href: \"https://github.com/localtunnel/localtunnel\",\n        children: \"localtunnel\"\n      }), \" is an open source tool, you could get a private server going if privacy is a concern.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"üõ∞Ô∏è Remote Chrome inspector\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Open your Chromium based browser and enter:\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"chrome://inspect/#devices\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You should see a list of remote targets and the pages that are open in each target.\"\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/remote-mobile-debugging/chrome-inspect.webp\",\n      alt: \"chrome inspect\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Clicking \", _jsx(_components.code, {\n        children: \"inspect\"\n      }), \" on the one you want to debug will open the Chrome Developer Tools and connect to the remote browser.\"]\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/remote-mobile-debugging/chrome-remote-debugging.webp\",\n      alt: \"chrome remote debugging\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can now see the viewport, tap around and use tools like the console, debugger, etc. You can give the URL to a colleague and have them remotely help out too.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Hope this helps your workflow!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","scope":{}},"series":null},"__N_SSG":true}