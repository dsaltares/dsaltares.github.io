{"pageProps":{"metadata":{"path":"content/post/2011-06-01-glapse-take-screenshots-glue-them-together.mdx","title":"gLapse: take screenshots, glue them together","date":"2011-06-01T22:00:26.000Z","categories":["Projects"],"series":null,"description":null,"slug":"glapse-take-screenshots-glue-them-together","readingTime":"2 min read","draft":false,"disableComments":false,"keywords":[],"banner":null},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    img: \"img\",\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    em: \"em\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.img, {\n      src: \"/img/glapse/glapse-logo.webp\",\n      alt: \"glapse-logo.png\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Several days ago I was a bit tired of working on \", _jsx(_components.a, {\n        href: \"/en/proyectos/iberogre/\",\n        children: \"IberOgre\"\n      }), \", the Spanish Ogre wiki so I started procrastinating. Then I discovered the \", _jsx(_components.a, {\n        href: \"http://ludumdare.com/compo/\",\n        children: \"Ludum Dare\"\n      }), \" 48h game development competition and I was amazed about the idea. Lots of developers use to \", _jsx(_components.strong, {\n        children: _jsx(_components.a, {\n          href: \"http://www.vimeo.com/23581777\",\n          children: \"record their progress in time lapse videos\"\n        })\n      }), \" to show how their mini games evolved. There are very good Windows tools to do that but \", _jsx(_components.strong, {\n        children: \"on GNU/Linux systems you have to use command line scripts\"\n      }), \" and \", _jsx(_components.strong, {\n        children: \"that's where gLapse comes into play\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"What is gLapse?\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"http://code.google.com/p/glapse/\",\n        children: \"gLapse\"\n      }), \" is a visual GNU/Linux tools to take desktop screenshots at a fixed custom time interval and them glue them together to make a time lapse video. It can be used to show your progress in any project you\\\"re working on. It doesn't have too many features but hey, the bright side is that gLapse is extremely easy to use.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It's written in Python using \", _jsx(_components.a, {\n        href: \"http://www.pygtk.org/\",\n        children: \"pyGTK\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"http://glade.gnome.org/\",\n        children: \"Glade\"\n      }), \" as GUI designing tool. Internally it uses \", _jsx(_components.a, {\n        href: \"http://ffmpeg.org/\",\n        children: \"ffmpeg\"\n      }), \" to encode video and \", _jsx(_components.a, {\n        href: \"http://freshmeat.net/projects/scrot/\",\n        children: \"scrot\"\n      }), \" to take screenshots. Feel free to use it as you wish since it's licensed under the \", _jsx(_components.a, {\n        href: \"http://www.gnu.org/licenses/gpl-3.0.html\",\n        children: \"GPL v3\"\n      }), \" license.\"]\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/glapse/glapse-02.webp\",\n      alt: \"glapse-02.png\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Features\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I released gLapse 0.1 two weeks ago and gLapse 0.2 launched two days ago, the following list shows the features it has now:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Take \", _jsx(_components.em, {\n          children: \".png\"\n        }), \" screenshots with custom quality and time interval.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Make videos using saved screenshots with custom quality and FPS.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Multilanguage: English, Spanish and German.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you happen to find any kind of problem using gLapse or have a feature request, please go directly to the \", _jsx(_components.a, {\n        href: \"http://code.google.com/p/glapse/issues/list\",\n        children: \"issues section\"\n      }), \" at Google Code. \", _jsx(_components.strong, {\n        children: \"Contributions are hugely welcome!\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Downloads\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"http://glapse.googlecode.com/files/glapse_0.2_all.deb\",\n          children: \"gLapse 0.2 Debian package\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"http://glapse.googlecode.com/files/glapse-0.2.tar.gz\",\n          children: \"gLapse 0.2 source package\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"What's next?\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"I've been thinking a lot about \", _jsx(_components.strong, {\n        children: \"improving gLapse\"\n      }), \" and here are some possible new features for next versions:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Webcam time lapse support.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Additional languages: French, Portuguese or Italian.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"...\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","scope":{}},"series":null},"__N_SSG":true}