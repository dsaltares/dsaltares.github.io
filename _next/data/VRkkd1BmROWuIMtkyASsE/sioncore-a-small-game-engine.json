{"pageProps":{"metadata":{"path":"content/post/2014-03-10-sioncore-a-small-game-engine.mdx","title":"SionCore, a small game engine","date":"2014-03-10T23:17:51.000Z","categories":["Games development"],"series":null,"description":null,"slug":"sioncore-a-small-game-engine","readingTime":"2 min read","draft":false,"disableComments":false,"keywords":[],"banner":null},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    em: \"em\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Today I created a repository on Gihub to keep track of my code base and I named it \", _jsx(_components.a, {\n        href: \"https://github.com/dsaltares/sioncore\",\n        children: \"SionCore\"\n      }), \". This wasn't made overnight, it's the result of several small game projects, such as game jam gigs and \", _jsx(_components.a, {\n        href: \"/games/math-maze/\",\n        children: \"Math Maze\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Slowly, it became obvious that some components were highly reusable and game agnostic. That is why I thought it would be good to make it public.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Who knows, maybe someday someone might even contribute!\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This small \", _jsx(_components.em, {\n        children: \"game engine\"\n      }), \" is built on top of \", _jsx(_components.a, {\n        href: \"https://github.com/libgdx/libgdx\",\n        children: \"Libgdx\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"https://github.com/stbachmann/ashley\",\n        children: \"Ashley\"\n      }), \" among others and it's compatible with desktop, Android and iOS platforms.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Disclaimer\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"SionCore is currently under heavy development, so expect constant API changes and a good deal of instability. Hopefully this one will last longer than my poorly executed previous attempts and will stabilise in a while. If that's what floats your boat, you're more than welcome on board.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Regardless of whether you use the whole thing or grab specific ideas, feedback is more than welcome.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Features\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Currently implemented and working.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Data driven entities\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Entity components and system collection: rendering, animation, physics.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Localisation with automatic generation of template CSV files.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Easy screen management\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Config files\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Data driven sprites\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Data driven physics\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Grouped asset management\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Basic state machine implementation\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Populate your Box2D world from map data\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Spine integration\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Multiple aspect ratio support\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Dependencies\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As of now, all the \", _jsx(_components.code, {\n        children: \".jar\"\n      }), \" files SionCore needs are included in the repository. However, switching to Gradle or Maven is something I want to get out of the way sooner rather than later.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Contributing\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you find a bug or would like a particular feature, please \", _jsx(_components.a, {\n        href: \"https://github.com/dsaltares/sioncore/issues\",\n        children: \"open an issue\"\n      }), \". On the other hand, if you want to get more involved, clone the repository and open a \", _jsx(_components.a, {\n        href: \"https://github.com/dsaltares/sioncore/pulls\",\n        children: \"pull request\"\n      }), \"!\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","scope":{}},"series":null},"__N_SSG":true}