{"pageProps":{"metadata":{"path":"content/post/2010-08-10-tiny-backup-pygtk-y-glade.mdx","title":"Tiny Backup, PyGTK y Glade","date":"2010-08-10T17:30:00.000Z","categories":["Projects"],"series":null,"description":null,"slug":"tiny-backup-pygtk-y-glade","readingTime":"3 min read","draft":false,"disableComments":false,"keywords":[]},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    img: \"img\",\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\",\n    h3: \"h3\",\n    em: \"em\",\n    div: \"div\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.img, {\n      src: \"/img/wp/tiny-backup1.png\",\n      alt: \"tiny-backup1.png\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Si quieres conocer una biblioteca o un lenguaje nuevos lo mejor es, sin lugar a dudas, utilizarlos. Había mirado ya algunas cosas sobre Python pero hace algunos meses sentí la necesidad de programar algo pequeño para adquirir un mínimo de destreza. Había oído maravillas de lo sencillo y elegante que era diseñar la interfaz de una aplicación de escritorio con \", _jsx(_components.strong, {\n        children: _jsx(_components.a, {\n          href: \"http://glade.gnome.org/\",\n          children: \"Glade\"\n        })\n      }), \" y manejarla con \", _jsx(_components.strong, {\n        children: _jsx(_components.a, {\n          href: \"http://www.pygtk.org/\",\n          children: \"PyGTK\"\n        })\n      }), \" desde Python. Por tanto me puse manos a la obra y \", _jsx(_components.strong, {\n        children: \"desarrollé Tiny Backup\"\n      }), \" en un par de días.\"]\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/wp/tiny-backup.png\",\n      alt: \"tiny-backup.png\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Tiny Backup y su funcionamiento\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Tiny Backup es una sencilla utilidad dirigida a usuarios de sistemas Debian para guardar un \", _jsx(_components.strong, {\n        children: \"listado de todos los paquetes\"\n      }), \" que tengan instalados y poder restaurarlos en caso de reinstalación del Sistema Operativo. Incluso es capaz de protegernos del un fallo grave en el disco duro ya que puede enviar dicho listado por \", _jsx(_components.strong, {\n        children: \"correo electrónico\"\n      }), \" (por el momento es compatible con Gmail, Hotmail y Yahoo).\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Está diseñado siguiendo las directrices del patrón \", _jsx(_components.strong, {\n        children: _jsx(_components.a, {\n          href: \"http://es.wikipedia.org/wiki/Programaci%C3%B3n_por_capas\",\n          children: _jsx(_components.em, {\n            children: \"\\\"Arquitectura en tres capas\\\"\"\n          })\n        })\n      }), \" aunque la capa de datos no ha sido necesaria en este caso. Ha sido un ejercicio muy interesante y, sin tener en cuenta el envío por e-mail, simplemente utiliza varios \", _jsx(_components.strong, {\n        children: \"comandos básicos\"\n      }), \" de GNU/Linux:\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"# Guardar listado de paquetes\\ndpkg --get-selections | grep -v deinstall &gt; paquetes_backup\\n#Guardar listado de repositorios\\ncp /etc/apt/sources.list repositorios_backup\\n\\n# Restaurar listado de repositorios\\nmv repositorios_backup /etc/apt/sources.list\\ngksudo apt-get update\\n# Restaurar paquetes\\ndpkg --set-selections &lt; paquetes_backup\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Por supuesto, es posible configurar los ficheros destino mediante el asistente de backup y restauración. Tiny Backup es libre bajo \", _jsxs(_components.strong, {\n        children: [\"licencia \", _jsx(_components.a, {\n          href: \"http://gplv3.fsf.org/\",\n          children: \"GPL v3\"\n        })]\n      }), \" y podéis obtenerlo a través de la \", _jsx(_components.a, {\n        href: \"http://code.google.com/p/python-tiny-backup/\",\n        children: \"forja en Google Code\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/wp/glade.png\",\n      alt: \"glade.png\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Glade, un gran editor de interfaces\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Glade es una herramienta con licencia GPL que nos permite diseñar interfaces para aplicaciones de escritorio y guardarlas en formato XML. Posteriormente, esos ficheros pueden ser cargados mediante la clase \", _jsx(_components.a, {\n        href: \"http://library.gnome.org/devel/gtk/stable/GtkBuilder.html\",\n        children: \"GtkBuilder\"\n      }), \" perteneciente a la API de \", _jsx(_components.a, {\n        href: \"http://www.gtk.org/\",\n        children: \"GTK\"\n      }), \". Lo que significa que es compatible con \", _jsx(_components.a, {\n        href: \"http://www.gtk.org/language-bindings.html\",\n        children: \"cualquier lenguaje que posea un port\"\n      }), \" de GTK entre los que, por supuesto, se encuentra Python (con PyGTK).\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"La filosofía de Glade consiste en \", _jsx(_components.strong, {\n        children: \"separar por completo la interfaz del código\"\n      }), \" de manera que podemos editarla sin necesidad de recompilaciones. Esto difiere bastante de los clásicos IDE que generan código automáticamente (muchas veces sucio y poco elegante) para manejar la vista. Como inconveniente tenemos un aumento de tiempo en el inicio de la aplicación, no obstante, es leve y no se aprecia en exceso. Existen muchas aplicaciones open source que han hecho uso de Glade, sin ir más lejos, el reproductor de música \", _jsx(_components.a, {\n        href: \"http://www.exaile.org/screens\",\n        children: \"Exaile\"\n      }), \" es una de ellas.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Entre las bondades de Glade también se encuentra la capacidad para decidir la \", _jsx(_components.strong, {\n        children: \"redistribución de los componentes\"\n      }), \" al redimensionar los formularios, algo muy de agradecer. Es posible que tratar de abarcar el software de buenas a primeras puede ser duro pero siguiendo un \", _jsx(_components.a, {\n        href: \"http://live.gnome.org/Glade/Tutorials\",\n        children: \"buen tutorial\"\n      }), \" en un par de días de puede estar utilizando sin problemas.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","scope":{}},"series":null},"__N_SSG":true}