{"pageProps":{"metadata":{"path":"content/post/2010-11-18-instalar-ogre-en-ubuntu-de-forma-sencilla.mdx","title":"Instalar Ogre en Ubuntu de forma sencilla","date":"2010-11-18T22:43:39.000Z","categories":["Games development"],"series":null,"description":null,"slug":"instalar-ogre-en-ubuntu-de-forma-sencilla","readingTime":"2 min read","draft":false,"disableComments":false,"keywords":[],"banner":null},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    img: \"img\",\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\",\n    h3: \"h3\",\n    em: \"em\",\n    div: \"div\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.img, {\n      src: \"/img/wp/ogre_17_logo.gif\",\n      alt: \"ogre_17_logo.gif\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Si sigues el proyecto \", _jsx(_components.a, {\n        href: \"http://osl.uca.es/iberogre/index.php/P%C3%A1gina_Principal\",\n        children: \"IberOgre\"\n      }), \" desde sus comienzos es probable que recuerdes \", _jsx(_components.a, {\n        href: \"/proyectos/pfc/sion-tower/periplo-por-un-entorno-de-trabajo-para-ogre/\",\n        children: \"este artículo\"\n      }), \" en el que contaba como \", _jsx(_components.strong, {\n        children: \"las pasé canutas para instalar Ogre 1.7\"\n      }), \" en mi entorno de producción (siempre quise decir esto, ¡suena tan rimbombante!). Mi objetivo era utilizar herramientas libres y no depender de ningún IDE en concreto a la hora de compilar proyectos. El caso es que ya no hay que compilar Ogre sino que tenemos unos \", _jsx(_components.strong, {\n        children: \"flamantes paquetes .deb\"\n      }), \" a nuestra disposición.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Gracias a la comunidad\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Miembros de la comunidad\"\n      }), \" de Ogre llevaban lanzando paquetes deb no oficiales desde hacía algún tiempo (¡y yo sin saberlo!). Por fin aparecen en la web oficial de Ogre como \", _jsx(_components.strong, {\n        children: \"sistema de instalación en Ubuntu\"\n      }), \" a partir de la reciente \", _jsx(_components.a, {\n        href: \"http://www.ogre3d.org/download\",\n        children: \"versión 1.7.2\"\n      }), \". Se trata de una aportación de gran valor que facilita mucho la vida a los usuarios de la biblioteca.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Proceso de instalación\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"**He actualizado el artículo \", _jsx(_components.a, {\n        href: \"http://osl2.uca.es/iberogre/index.php/Instalaci%C3%B3n_de_Ogre3D_1.7_en_GNU/Linux\",\n        children: \"\\\"Instalación de Ogre3D 1.7 en GNU/Linux\\\"\"\n      }), \" añadiendo una sección dedicada a Ubuntu con este nuevo método. A continuación hago un pequeño resumen para que veas lo sencillo que es:\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"En primer lugar debes añadir el repositorio PPA del \", _jsx(_components.em, {\n        children: \"\\\"team-ogre\\\"\"\n      }), \" a tu sistema:\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"sudo add-apt-repository ppa:ogre-team/ogre\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Para actualizar tu lista de paquetes disponibles recurre al clásico:\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"sudo apt-get update\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Genial, sólo te queda:\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"sudo apt-get install libogre-dev\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"En IberOgre utilizamos OIS (Object Oriented Input System) para gestionar la entrada del usuario. Puedes descargar la última versión desde \", _jsx(_components.a, {\n        href: \"http://sourceforge.net/projects/wgois/\",\n        children: \"su web en Sourceforge\"\n      }), \" aunque tendrás que compilarla con las \", _jsx(_components.a, {\n        href: \"http://en.wikipedia.org/wiki/GNU_build_system\",\n        children: \"autotools\"\n      }), \". En realidad, nos basta con la versión de los repositorios:\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"sudo apt-get install libois-dev\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"¿Fácil, verdad?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"He probado este nuevo proceso en un netbook con Ubuntu 10.04 y va de maravilla. Los makefiles utilizados en la wiki funcionan a la perfección, por lo que si sigues los artículos no tendrás ningún problema.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Ahora todos viviremos más tranquilos\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","scope":{}},"series":null},"__N_SSG":true}