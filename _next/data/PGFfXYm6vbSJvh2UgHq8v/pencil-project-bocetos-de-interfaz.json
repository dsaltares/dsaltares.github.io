{"pageProps":{"metadata":{"path":"content/post/2010-08-01-pencil-project-bocetos-de-interfaz.mdx","title":"Pencil Project, bocetos de interfaz","date":"2010-08-01T11:06:53.000Z","categories":["Games development"],"series":null,"description":null,"slug":"pencil-project-bocetos-de-interfaz","readingTime":"2 min read","draft":false,"disableComments":false,"keywords":[],"banner":null},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    img: \"img\",\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.img, {\n      src: \"/img/wp/pencil-project-logo.png\",\n      alt: \"pencil-project-logo.png\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A la hora de desarrollar software es muy importante \", _jsx(_components.strong, {\n        children: \"diseñar correctamente la interfaz\"\n      }), \", no importa si es una web o una aplicación de escritorio. Antes de lanzarnos a programar como posesos, durante el análisis y el diseño es altamente recomendable realizar bocetos o esquemas de las pantallas con las que contará la aplicación así como la forma de interactuar con las mismas. Para ello nos podemos ayudar de alguna herramienta para crear bocetos de interfaces de usuario (mockups o sketching).\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: _jsx(_components.a, {\n          href: \"http://pencil.evolus.vn/en-US/Home.aspx\",\n          children: \"Pencil Project\"\n        })\n      }), \" es la alternativa libre (\", _jsx(_components.a, {\n        href: \"http://www.gnu.org/licenses/gpl-2.0.html\",\n        children: \"GPL v2\"\n      }), \") y multiplataforma para realizar esta tarea. Es una simple extensión de Firefox pero cuenta con una potencia y flexibilidad considerables. Nos permite crear proyectos con varias pantallas, en las cuales es posible añadir cualquier elemento de una GUI típica (botones, tablas, cajas de activación, deslizadores…). No sólo será útil para aplicaciones de escritorio sino que cuenta con multitud de elementos web. Una de sus características más importantes es la capacidad de alinear objetos para que el conjunto quede ordenado.\"]\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/wp/pencil-project.png\",\n      alt: \"pencil-project.png\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Los proyectos se guardan en XML aunque podemos \", _jsx(_components.strong, {\n        children: \"exportar nuestros diseños a otros formatos\"\n      }), \" como: PNG, PDF, ODT o HTML eligiendo entre varias plantillas disponibles. La curva de aprendizaje es prácticamente nula y resulta completamente \", _jsx(_components.strong, {\n        children: \"intuitivo\"\n      }), \". Se trabaja de manera rápida y ayuda mucho a despejar las ideas sobre la interfaz del software a desarrollar. Una excelente alternativa a herramientas privativas como Balsamiq Mockups.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","scope":{}},"series":null},"__N_SSG":true}