{"pageProps":{"metadata":{"path":"content/post/2016-12-04-migration-from-wordpress-to-hugo.mdx","title":"Migration from Wordpress to Hugo","date":"2016-12-04T12:18:32.000Z","categories":["General"],"series":null,"description":null,"slug":"migration-from-wordpress-to-hugo","readingTime":"3 min read","draft":false,"disableComments":false,"keywords":[],"banner":null},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    img: \"img\",\n    p: \"p\",\n    a: \"a\",\n    h3: \"h3\",\n    ol: \"ol\",\n    li: \"li\",\n    code: \"code\",\n    div: \"div\",\n    pre: \"pre\",\n    ul: \"ul\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.img, {\n      src: \"/img/others/hugo-logo.png\",\n      alt: \"hugo-logo\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"At long last, I got around to do something I had been meaning to do for a very\\nlong time. I migrated this Wordpress blog over to a statically generated site\\npowered by \", _jsx(_components.a, {\n        href: \"http://gohugo.io/\",\n        children: \"Hugo\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"That's 6 years or over 300 posts worth of content.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Why not stay with Wordpress?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"First of all, I wanted to move away from Wordpress because it's heavy and requires\\nquite a bit of setup: PHP, database, plugins and so on. Markdown based static site\\ngenerators have been around for a while and being able to keep everything in plain\\ntext and under a familiar source control system such as Git is awesome.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I use git and Markdown all the time both at home and at work.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Why Hugo?\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Hugo is an \", _jsx(_components.a, {\n        href: \"https://github.com/spf13/hugo\",\n        children: \"open source\"\n      }), \" static site generator\\nwritten in Go. It's cross-platform and ships as a dependency free binary. Comprehensive\\n\", _jsx(_components.a, {\n        href: \"http://gohugo.io/overview/introduction/\",\n        children: \"documentation\"\n      }), \", wide range of\\n\", _jsx(_components.a, {\n        href: \"themes.gohugo.io\",\n        children: \"themes\"\n      }), \" as well as active and helpful \", _jsx(_components.a, {\n        href: \"https://discuss.gohugo.io/\",\n        children: \"community\"\n      }), \"\\nare great additions.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Whilst \", _jsx(_components.a, {\n        href: \"https://jekyllrb.com/\",\n        children: \"Jekyll\"\n      }), \" was the more established solution, it\\nrequired Ruby and I really wanted to keep my environment as simple as possible.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Other alternatives lacked features, support, had a more complex setup or a combination\\nof the former.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We've got a winner!\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Exporting Wordpress content\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The process went on like this.\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Exported all posts and pages to XML with the standard Wordpress Export tool.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Used \", _jsx(_components.a, {\n          href: \"https://github.com/thomasf/exitwp\",\n          children: \"Exitwp\"\n        }), \" to convert content to Markdown.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Lots of regex search and replace in Sublime.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Back in 2010 I used the WYSIWYG editor in Wordpress and later on I moved to use\\nthe \", _jsx(_components.a, {\n        href: \"https://jetpack.com/support/markdown/\",\n        children: \"Markdown module in Jetpack\"\n      }), \". The mix\\nreally confused Exitwp and required me to do a lot of manual editing and that took\\nquite a while.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Pushing to production\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This \", _jsx(_components.a, {\n        href: \"https://www.digitalocean.com/community/tutorials/how-to-deploy-a-hugo-site-to-production-with-git-hooks-on-ubuntu-14-04\",\n        children: \"excellent tutorial\"\n      }), \"\\nproved most useful to get a streamlined publishing pipeline.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Essentially, this involved the following:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Install Hugo on my production server\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Put the site sources in a local git repository\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Create a git bare repository in the production server\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Add a \", _jsx(_components.code, {\n          children: \"post-receive\"\n        }), \" hook on the production repository that runs \", _jsx(_components.code, {\n          children: \"hugo\"\n        }), \" and builds the site.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Give the article a proper read if you want to know more. The publish hook also\\nuses \", _jsx(_components.code, {\n        children: \"rsync\"\n      }), \" to back everything up in case something goes amiss.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To create a new post, test it locally and publish it, I simply do:\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"hugo new post/category/name.md\\nhugo serve --buildDrafts\\ngit add content\\ngit push prod\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Results\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"So far I love it!\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here are some poor man's stats on loading times for \", _jsx(_components.a, {\n        href: \"/\",\n        children: \"the homepage\"\n      }), \", mind\\nthat I haven't tried to optimized neither of the two.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Wordpress: ~3.7s\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Hugo: ~2.1s\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Please, let me know if you find anything broken, I would really appreciate it!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","scope":{}},"series":null},"__N_SSG":true}