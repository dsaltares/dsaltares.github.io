{"pageProps":{"metadata":{"path":"content/post/2011-01-05-ogitor-instalacion-en-linux-y-el-formato-dotscene.mdx","title":"Ogitor: instalación en Linux y el formato DotScene","date":"2011-01-05T10:00:40.000Z","categories":["Games development"],"series":null,"description":null,"slug":"ogitor-instalacion-en-linux-y-el-formato-dotscene","readingTime":"4 min read","draft":false,"disableComments":false,"keywords":[],"banner":null},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    img: \"img\",\n    p: \"p\",\n    strong: \"strong\",\n    h3: \"h3\",\n    a: \"a\",\n    em: \"em\",\n    h4: \"h4\",\n    ul: \"ul\",\n    li: \"li\",\n    div: \"div\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.img, {\n      src: \"/img/wp/ogitor.png\",\n      alt: \"ogitor.png\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Como es lógico, \", _jsx(_components.strong, {\n        children: \"los niveles de Sion Tower se almacenarán en ficheros\"\n      }), \" y deberán contener información para poder desplegar el escenario, oleadas de enemigos, música etc. Escribir a mano un un fichero tan complejo es peor que una tortura propia de mafiosos. Por tanto, lo ideal sería disponer de \", _jsx(_components.strong, {\n        children: \"un editor libre y multiplataforma\"\n      }), \" con el que crear los niveles. El sistema de Sion Tower tomará la responsabilidad parsear los ficheros del editor y cargar los niveles. Para un menor sufrimiento, es indispensable que el editor sea compatible con un formato abierto y conocido por la comunidad. Más detalles a continuación.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"El formato DotScene\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsxs(_components.strong, {\n        children: [_jsx(_components.a, {\n          href: \"http://www.ogre3d.org/tikiwiki/DotScene\",\n          children: \"DotScene\"\n        }), \" es un formato xml\"]\n      }), \" diseñado para la exportación e importación de \", _jsx(_components.strong, {\n        children: \"escenas 3D\"\n      }), \" en proyectos Ogre, podéis encontrar el correspondiente DTD \", _jsx(_components.a, {\n        href: \"http://www.ogre3d.org/tikiwiki/DotSceneFormat\",\n        children: \"aquí\"\n      }), \". Es ampliamente utilizado por la comunidad de Ogre en ficheros con extensión \", _jsx(_components.em, {\n        children: \".scene\"\n      }), \" y contempla todo lo que una escena puede mostrar: mayas, luces, geometría básica y un larguísimo etcétera.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"El procesamiento de un fichero con tantos elementos podría ser complejo. No obstante, \", _jsx(_components.strong, {\n        children: \"existen parsers\"\n      }), \" ya desarrollados como \", _jsx(_components.a, {\n        href: \"http://www.ogre3d.org/tikiwiki/New+DotScene+Loader&comzone=show\",\n        children: _jsx(_components.strong, {\n          children: \"DotSceneLoader\"\n        })\n      }), \". En cualquier caso, creo que acabaré implementando uno propio que utilice internamente la biblioteca \", _jsx(_components.a, {\n        href: \"http://code.google.com/p/pugixml/\",\n        children: \"pugixml\"\n      }), \". Ofrezco dos razones principales: me gustaría personalizar mi parser y pugixml es tremendamente eficiente en tiempo/espacio (mirad este \", _jsx(_components.a, {\n        href: \"http://pugixml.org/benchmark/\",\n        children: \"impresionante benchmark\"\n      }), \").\"]\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/wp/ogitor-screen.jpg\",\n      alt: \"ogitor-screen-300x161.jpg\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Ogitor, la respuesta\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsxs(_components.strong, {\n        children: [_jsx(_components.a, {\n          href: \"http://www.ogitor.org/\",\n          children: \"Ogitor\"\n        }), \" es un editor de escenarios libre y multiplataforma\"]\n      }), \". Está desarrollado con QT y, por supuesto, Ogre. Lo mejor de todo es que soporta el formato DotScene así que no tendré que preocuparme por toquetear inmensos ficheros XML. Es compatible tanto con Windows como con Linux aunque en éste último hay que compilar. Aún se encuentra en la versión 0.4 pero tiene un desarrollo activo y una \", _jsx(_components.a, {\n        href: \"http://forum.ogitor.org/\",\n        children: \"comunidad\"\n      }), \" dispuesta a ayudar.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Instalación de Ogitor en Linux\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Ogitor viene perfectamente empaquetado para Windows pero \", _jsx(_components.strong, {\n        children: \"en Linux estamos obligados a compilarlo\"\n      }), \" desde las fuentes. Aunque… ¿desde cuándo ha sido eso un problema para tan avezados usuarios? En las siguientes líneas les detallo el proceso, no exento de pequeños detalles delicados.\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Dependencias\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Ogre 1.7\"\n        }), \": creo que era bastante evidente. Si no lo has hecho, puedes acudir a IberOgre por su flamante \", _jsx(_components.a, {\n          href: \"http://osl2.uca.es/iberogre/index.php/Instalaci%C3%B3n_de_Ogre3D_1.7_en_GNU/Linux\",\n          children: \"artículo\"\n        }), \" al respecto. Es importante que instales los ejemplos.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"CMake\"\n        }), \": para configurar y compilar Ogitor necesitamos la herramienta \", _jsx(_components.a, {\n          href: \"http://www.cmake.org/\",\n          children: \"CMake\"\n        }), \". A tal efecto, instala los paquetes cmake y el frontend cmake-gui:\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"sudo apt-get install cmake cmake-gui\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"QT4\"\n        }), \": para compilar Ogitor es imprescindible la versión de desarrollo de la cuarta edición de \", _jsx(_components.a, {\n          href: \"http://es.wikipedia.org/wiki/Qt_%28biblioteca%29\",\n          children: \"QT.\"\n        }), \" El paquete necesario se llama libqt4-dev:\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"sudo apt-get install libqt4-dev\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Boost RegEx\"\n        }), \": Ogitor hace uso de la biblioteca de expresiones regulares de Boost así que toca instalarla:\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"sudo apt-get install libboost-regex-dev\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/wp/ogitor-cmake.png\",\n      alt: \"ogitor-cmake-300x149.png\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Compilación e Instalación\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Le toca el turno al editor que llevamos queriendo instalar hace un buen rato:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Descargamos la última versión estable (4.2) desde la \", _jsx(_components.a, {\n          href: \"http://www.ogitor.org/Repositories\",\n          children: \"web oficial\"\n        }), \" y descomprimimos el paquete.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Ejecutamos la interfaz de cmake introduciendo cmake-gui en la terminal.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Indicamos el directorio de los fuentes y donde queremos guardar el proyecto configurado, mejor crear una carpeta a tal efecto.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Pulsamos \", _jsx(_components.em, {\n          children: \"\\\"Configure\\\"\"\n        }), \". Si se produce algún error es probable que CMake no consiga encontrar alguna biblioteca, revisa que cumples todas las dependencias.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Establecemos las opciones \", _jsx(_components.em, {\n          children: \"OGITOR_DIST\"\n        }), \" a true y \", _jsx(_components.em, {\n          children: \"OGRE_SAMPLES_INCLUDEPATH\"\n        }), \" con la ruta de las cabeceras de los ejemplos de Ogre.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Hacemos click sobre \", _jsx(_components.em, {\n          children: \"\\\"Generate\\\"\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Finalmente, los clásicos:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"make\\nsudo make install\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"El ejecutable\"\n      }), \" de Ogitor se habrá creado en:\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"[compilación-ogitor]/RunPath/bin/qtOgitor\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Nos vemos en el siguiente episodio\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"En este artículo hemos hablado sobre el ampliamente aceptado formato DotScene y hemos desgranado la instalación de Ogitor. Es probable que haya un próximo episodio en el que relate mi experiencia con Ogitor y documente la creación de niveles para Sion Tower. Ya saben, \", _jsx(_components.strong, {\n        children: \"ante cualquier problema que encuentren pueden dejar un comentario\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","scope":{}},"series":null},"__N_SSG":true}