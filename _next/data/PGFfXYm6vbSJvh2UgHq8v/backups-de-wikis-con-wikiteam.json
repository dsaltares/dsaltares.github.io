{"pageProps":{"metadata":{"path":"content/post/2011-06-04-backups-de-wikis-con-wikiteam.mdx","title":"Backups de wikis con Wikiteam","date":"2011-06-04T10:45:05.000Z","categories":["Computing"],"series":null,"description":null,"slug":"backups-de-wikis-con-wikiteam","readingTime":"3 min read","draft":false,"disableComments":false,"keywords":[],"banner":null},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    img: \"img\",\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\",\n    h3: \"h3\",\n    ol: \"ol\",\n    li: \"li\",\n    div: \"div\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.img, {\n      src: \"/img/wp/backups-wikiteam1.png\",\n      alt: \"backups-wikiteam1.png\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsxs(_components.strong, {\n        children: [_jsx(_components.a, {\n          href: \"http://osl2.uca.es/iberogre/index.php/P%C3%A1gina_Principal\",\n          children: \"IberOgre\"\n        }), \" está alojada en los servidores de la \", _jsx(_components.a, {\n          href: \"http://osl.uca.es/\",\n          children: \"OSLUCA\"\n        })]\n      }), \" a los que no tengo acceso y, aunque sé que se hacen \", _jsx(_components.strong, {\n        children: \"copias de seguridad\"\n      }), \" diarias, me gustaría tener algunas en local del trabajo que tanto sudor ha costado. Para eso, me viene de maravilla la herramienta que ha desarrollado el compañero Emilio José Rodríguez Posada: \", _jsx(_components.strong, {\n        children: _jsx(_components.a, {\n          href: \"http://code.google.com/p/wikiteam/\",\n          children: \"Wikiteam\"\n        })\n      }), \". A continuación, más información sobre la herramienta y cómo hacer backups de wikis con ella.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"¿Qué hace Wikiteam?\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Wikiteam\"\n      }), \" es un script GPL v3 escrito en Python que \", _jsx(_components.strong, {\n        children: \"descarga todo el contenido de una wiki\"\n      }), \" que utilice el sistema Mediawiki (actualmente el más extendido). No sólo es capaz de obtener el estado actual de una wiki sino que también recupera \", _jsx(_components.strong, {\n        children: \"todo el historial\"\n      }), \" de cambios así como las \", _jsx(_components.strong, {\n        children: \"imágenes y ficheros\"\n      }), \" que se hayan subido. El único (pero comprensible) problema es que no recupera los usuarios ya que no requiere acceso a la base de datos.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"El objetivo principal de Wikiteam es \", _jsx(_components.strong, {\n        children: \"permitir que cualquier usuario pueda hacer una copia de una wiki\"\n      }), \". Si el sitio deja de existir por cualquier motivo, el conocimiento no se habrá perdido ya que este usuario podría restaurar la copia en un nuevo servidor. De hecho, en la forja del proyecto tienen disponibles backups de diversas wikis.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Hacer backups con Wikiteam\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Generar copias de seguridad es harto sencillo y sólo requiere ejecutar el script con los parámetros adecuados. Sigue los siguientes pasos:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"http://code.google.com/p/wikiteam/source/browse/trunk/dumpgenerator.py\",\n          children: \"Descarga el script\"\n        }), \" desde su forja de Google Code.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Ejecuta el siguiente comando en el directorio en elque desees guardar la copia:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"python dumpgenerator.py –api=http://wikidomain.com/path/to/api.php –xml --images\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"El significado de los parámetros es el siguiente:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"api\"\n        }), \": ruta a la API de la wiki, normalmente es la URL de la wiki seguida de api.php. Por ejemplo, en IberOgre es: \", _jsx(_components.a, {\n          href: \"http://osl2.uca.es/iberogre/api.php\",\n          children: \"http://osl2.uca.es/iberogre/api.php\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"xml\"\n        }), \": recupera todas las páginas de la wiki junto a su historial-\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"images\"\n        }), \": recupera todas las imágenes y ficheros de la wiki.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Restaurar backups con Wikiteam\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Volcar las copias en otra instancia de Mediawiki es ligeramente más complejo y requiere, evidentemente, de acceso al servidor. Lo recomendable es que sigas \", _jsx(_components.a, {\n        href: \"http://www.mediawiki.org/wiki/Manual:Importing_XML_dumps\",\n        children: \"el proceso detallado en la propia wiki de Mediawiki\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","scope":{}},"series":null},"__N_SSG":true}