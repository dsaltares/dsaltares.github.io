{"pageProps":{"metadata":{"path":"content/post/2011-04-06-gestion-de-estados-de-juego.mdx","title":"Gestión de estados de juego","date":"2011-04-06T14:10:13.000Z","categories":["Games development"],"series":null,"description":null,"slug":"gestion-de-estados-de-juego","readingTime":"5 min read","draft":false,"disableComments":false,"keywords":[]},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    img: \"img\",\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\",\n    em: \"em\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.img, {\n      src: \"/img/wp/titulo-statemanager.png\",\n      alt: \"titulo-statemanager.png\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Sion Tower cuenta con varios estados y transiciones\"\n      }), \" los cuales están especificados en el \", _jsx(_components.a, {\n        href: \"http://forja.rediris.es/frs/download.php/2019/gdd.pdf\",\n        children: \"Documento de Diseño (GDD)\"\n      }), \" que publiqué hace tiempo. Por supuesto, me refiero a estados como \", _jsx(_components.em, {\n        children: \"\\\"Juego\\\"\"\n      }), \", \", _jsx(_components.em, {\n        children: \"\\\"Menú\\\"\"\n      }), \", \", _jsx(_components.em, {\n        children: \"\\\"Selección de nivel\\\"\"\n      }), \". Me parece interesante comentar a vista de pájaro estos estados así como el sistema subyacente que los gestiona. Puede ser una buena manera para saber hasta dónde pretende llegar el juego. En este artículo hablaremos de las clases \", _jsx(_components.em, {\n        children: \"State\"\n      }), \" y \", _jsx(_components.em, {\n        children: \"StateManager\"\n      }), \" entre otras.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Diagrama de estados\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"En el siguiente diagrama se muestran los distintos estados en los que se puede encontrar Sion Tower:\"\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/wp/flowchart.png\",\n      alt: \"flowchart.png\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Menú principal\"\n        }), \": se muestra el logo del juego y la torre desde el exterior. El usuario puede elegir entre \", _jsx(_components.em, {\n          children: \"\\\"Selección de perfil\\\"\"\n        }), \", \", _jsx(_components.em, {\n          children: \"\\\"Créditos\\\"\"\n        }), \" o \", _jsx(_components.em, {\n          children: \"\\\"Salir\\\"\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Créditos\"\n        }), \": en la pantalla de créditos se sustituyen las opciones del menú principal por los nombres de los implicados en el desarrollo, como era de esperar. La única opción es volver al menú.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Selección de perfil\"\n        }), \": el usuario puede seleccionar su partida entre la lista de partidas guardadas. Así podrá recuperar los niveles desbloqueados y las habilidades adquiridas por el personaje.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Selección de nivel\"\n        }), \": se muestra una lista de los niveles disponibles según el perfil elegido. De cada nivel aparece el nombre, una descripción y un icono.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Selección de habilidades\"\n        }), \": no es posible utilizar todas las habilidades en cada nivel, el usuario debe seleccionar un número limitado de ellas.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Juego\"\n        }), \": la pantalla de juego, donde se desarrolla la acción. Si el usuario vence a los enemigos se pasa a la pantalla de victoria, en caso contrario le aparece un mensaje y se reinicia el nivel.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Fin de nivel\"\n        }), \": cuando el usuario vence se muestran los puntos obtenidos y otros logros como haber desbloqueado alguna habilidad nueva.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Para detalles adicionales podéis acudir al documento de diseño que incluye bocetos completos de cada uno de los estados.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Diagrama de clases\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A continuación podéis ver un diagrama UML con las clases que gestionan los estados del juego. Es bastante grande así que lo mejor es hacer click sobre la imagen para ampliarla.\"\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/wp/statemanager.png\",\n      alt: \"statemanager.png\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"La clase State\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.em, {\n        children: \"State\"\n      }), \" es una clase abstracta que \", _jsx(_components.strong, {\n        children: \"modela un estado de juego genérico\"\n      }), \". Cuenta con los métodos virtuales \", _jsx(_components.em, {\n        children: \"load\"\n      }), \" y \", _jsx(_components.em, {\n        children: \"clear\"\n      }), \" para cargar y liberar los elementos que contiene sin necesidad de destruir el estado completamente. Todos los estados poseen un método \", _jsx(_components.em, {\n        children: \"update\"\n      }), \" que recibe el tiempo en ms desde el último frame (\", _jsx(_components.em, {\n        children: \"deltaT\"\n      }), \") para actualizar lógicamente los elementos de dicho estado. Los estados están preparados para recibir los eventos que captura el \", _jsx(_components.em, {\n        children: \"StateManager\"\n      }), \", por ello cuenta con los manejadores típicos de la biblioteca OIS (\", _jsx(_components.a, {\n        href: \"http://osl2.uca.es/iberogre/index.php/Manejo_b%C3%A1sico_de_OIS\",\n        children: \"más sobre OIS en IberOgre\"\n      }), \").\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Por cada estado de juego tendríamos una clase\"\n      }), \" que herede de \", _jsx(_components.em, {\n        children: \"State\"\n      }), \" como podrían ser \", _jsx(_components.em, {\n        children: \"StateGame\"\n      }), \", \", _jsx(_components.em, {\n        children: \"StateMenu\"\n      }), \" o \", _jsx(_components.em, {\n        children: \"StateCredits\"\n      }), \". Por ejemplo, el estado de juego controlaría al personaje, los enemigos y el escenario. Como podéis ver es un sistema muy genérico y extensible para otros proyectos. De hecho estoy pensando en liberarlo de forma independiente.\"]\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/wp/menu-principal.png\",\n      alt: \"menu-principal.png\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"La clase StateManager\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"La clase \", _jsx(_components.em, {\n        children: \"StateManager\"\n      }), \" lleva internamente una \", _jsx(_components.strong, {\n        children: \"pila de estados\"\n      }), \" lo que nos permite volver atrás por los menús del juego de forma muy sencilla. \", _jsx(_components.strong, {\n        children: \"El tope de la pila sería el estado activo\"\n      }), \" mientras que el resto pueden estar en pausa o ejecutándose en segundo plano. A través de los metodos \", _jsx(_components.em, {\n        children: \"changeState\"\n      }), \", \", _jsx(_components.em, {\n        children: \"pushState\"\n      }), \", \", _jsx(_components.em, {\n        children: \"popState\"\n      }), \" y \", _jsx(_components.em, {\n        children: \"popAllStates\"\n      }), \" se nos permite gestionar los cambios entre estados. No hay que tener cuidado con el momento en el que se hace un \", _jsx(_components.em, {\n        children: \"popState\"\n      }), \", no se destruye ningún estado en ese preciso instante. El \", _jsx(_components.em, {\n        children: \"StateManager\"\n      }), \" espera a un momento seguro para hacerlo, \", _jsx(_components.strong, {\n        children: \"no más segmentos violados\"\n      }), \" en ese aspecto.\"]\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/wp/statestack.png\",\n      alt: \"statestack.png\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.em, {\n        children: \"StateManager\"\n      }), \" inicia el bucle de juego con el método \", _jsx(_components.em, {\n        children: \"start\"\n      }), \" y se comporta como un \", _jsx(_components.em, {\n        children: \"FrameListener\"\n      }), \". En cada iteración se disparan los eventos \", _jsx(_components.em, {\n        children: \"frameStarted\"\n      }), \", \", _jsx(_components.em, {\n        children: \"frameEnded\"\n      }), \" y \", _jsx(_components.em, {\n        children: \"frameRenderingQueued\"\n      }), \" para actualizar lógicamente los estados activos de la pila. Así mismo recibe eventos de ventana, de teclado y de ratón que transmite a los eventos que controla.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"La idea de la pila de estados\"\n      }), \" y las transiciones seguras la tomé de uno de los proyectos de mi compañero \", _jsx(_components.a, {\n        href: \"http://josetomastocino.com/\",\n        children: \"José Tomás Tocino\"\n      }), \". Lo utilizaba en un juego con \", _jsx(_components.a, {\n        href: \"http://www.libgosu.org/\",\n        children: \"Gosu\"\n      }), \" mientras que yo lo he adaptado a Ogre y OIS.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Conclusiones\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Con esto terminamos la documentación de la gestión de estados de Sion Tower. Habréis comprobado que \", _jsx(_components.strong, {\n        children: \"de una forma sencilla y ordenada\"\n      }), \" podemos añadir, modificar y manejar nuestros estados de juego. Sed libres (GPL 3) de reutilizar este código alojado en la \", _jsx(_components.a, {\n        href: \"http://forja.rediris.es/scm/?group_id=820\",\n        children: \"forja de Red Iris\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"¡Se aceptan sugerencias, críticas y lanzamiento de fruta podrida!\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","scope":{}},"series":null},"__N_SSG":true}