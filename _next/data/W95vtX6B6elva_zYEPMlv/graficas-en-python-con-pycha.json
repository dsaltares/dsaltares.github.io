{"pageProps":{"metadata":{"path":"content/post/2011-03-27-graficas-en-python-con-pycha.mdx","title":"Gráficas en Python con PyCha","date":"2011-03-27T11:00:00.000Z","categories":["Computing"],"series":null,"description":null,"slug":"graficas-en-python-con-pycha","readingTime":"3 min read","draft":false,"disableComments":false,"keywords":[],"banner":null},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    img: \"img\",\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\",\n    h3: \"h3\",\n    ol: \"ol\",\n    li: \"li\",\n    div: \"div\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.img, {\n      src: \"/img/wp/titulo-pycha.webp\",\n      alt: \"titulo-pycha.png\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"En una práctica de la Universidad pedían medir los tiempos de ejecución de un algoritmo paralelo empleando un número diferente de hilos en cada ocasión. En la correspondiente memoria debía aparecer una comparativa del rendimiento así que decidí adjuntar una gráfica para ilustrarlo mejor. Introducir los datos a manubrio iba a ser horriblemente tedioso. Me entró el gusanillo y me hice un sencillo \", _jsxs(_components.strong, {\n        children: [\"script en Python que genera la gráfica utilizando \", _jsx(_components.a, {\n          href: \"https://bitbucket.org/lgs/pycha/\",\n          children: \"PyCha\"\n        })]\n      }), \". A continuación más información sobre esta genial biblioteca.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"¿PyCha? Eso suena muy mal\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsxs(_components.strong, {\n        children: [_jsx(_components.a, {\n          href: \"https://bitbucket.org/lgs/pycha/\",\n          children: \"PyCha\"\n        }), \" (Python Charts) es una biblioteca libre\"]\n      }), \" (LGPL) creada por Lorenzo Gil que nos ayuda a \", _jsxs(_components.strong, {\n        children: [\"generar gráficas con \", _jsx(_components.a, {\n          href: \"http://en.wikipedia.org/wiki/Cairo_(graphics)\",\n          children: \"Cairo\"\n        })]\n      }), \". A cambio de no incorporar un gran número de opciones resulta fácil de usar, lo cual es una gran ventaja. El único defecto que le veo es que no todas las opciones están documentadas. A pesar de ello, aprender a usar PyCha no me llevó más de diez minutos.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Instalación de PyCha en Debian\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Instalar PyCha en un sistema basado en Debian como Ubuntu es \", _jsx(_components.strong, {\n        children: \"harto sencillo\"\n      }), \". Partamos de que no cuentas con el intérprete ni el gestor de paquetes de Python, \", _jsx(_components.a, {\n        href: \"http://es.wikipedia.org/wiki/EasyInstall\",\n        children: \"EasyInstall\"\n      }), \". Sólo has de seguir los siguientes pasos:\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Instalar Python junto a EasyInstall:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"sudo apt-get install python-dev python-setuptools build-essential\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Descargar e instalar PyCha:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"sudo eassy_install pycha\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Generando una gráfica con PyCha\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Construir una gráfica en PyCha no tiene complicación alguna. A continuación \", _jsx(_components.strong, {\n        children: \"vamos a mostrar un ejemplo\"\n      }), \" aunque puedes consultar la \", _jsx(_components.a, {\n        href: \"http://packages.python.org/pycha/\",\n        children: \"documentación oficial\"\n      }), \" para más detalles. En el siguiente script obtendremos un diagrama de barras con el número de videojuegos que poseo en función de su género (cifras inventadas).\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"#!/usr/bin/env python\\n# -*- coding: utf-8 -*-\\n\\nimport cairo\\nimport pycha.bar\\n\\ndef main():\\n    # Ancho y alto de la gráfica\\n    width, height = (550, 310)\\n\\n    # Superficie cairo\\n    surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, width, height)\\n\\n    # Tomamos los datos\\n    data = [(&#39;Simulación&#39;, 2),\\n            (&#39;Plataformas&#39;, 5),\\n            (&#39;Estrategia&#39;, 8),\\n            (&#39;Deporte&#39;, 3),\\n            (&#39;Acción&#39;, 10),\\n            (&#39;Puzzle&#39;, 1)]\\n\\n    # Los cargamos en el dataSet\\n    dataSet = (\\n        (&#39;Puntos&#39;, [(i, l[1]) for i, l in enumerate(data)]),\\n    )\\n\\n    # Opciones de la gráfica\\n    ticks = [dict(v=i, label=l[0]) for i, l in enumerate(data)]\\n    options = {\\n        &#39;legend&#39;: {&#39;hide&#39;: True},\\n        &#39;axis&#39;: {\\n            &#39;x&#39;: {\\n                &#39;ticks&#39;: ticks,\\n                &#39;label&#39;: &#39;Género&#39;,\\n            },\\n            &#39;y&#39;: {\\n                &#39;tickCount&#39;: 5,\\n                &#39;label&#39;: &#39;Número&#39;,\\n            }\\n        },\\n        &#39;background&#39;: {\\n            &#39;chartColor&#39;: &#39;#f3f9fb&#39;,\\n            &#39;lineColor&#39;: &#39;#d1e5ec&#39;\\n        },\\n        &#39;colorScheme&#39;: {\\n            &#39;name&#39;: &#39;gradient&#39;,\\n            &#39;args&#39;: {\\n                &#39;initialColor&#39;: &#39;blue&#39;,\\n            },\\n        },\\n    }\\n\\n    # Creamos la gráfica\\n    chart = pycha.bar.VerticalBarChart(surface, options)\\n    chart.addDataset(dataSet)\\n    chart.render()\\n\\n    # La guardamos en un fichero .png\\n    surface.write_to_png(&#39;chart.webp&#39;)\\n\\nif __name__ == &quot;__main__&quot;:\\n    main()\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"El resultado es el siguiente:\"\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/wp/chart.webp\",\n      alt: \"chart.png\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","scope":{}},"series":null},"__N_SSG":true}