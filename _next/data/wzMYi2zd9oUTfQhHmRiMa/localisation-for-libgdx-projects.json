{"pageProps":{"metadata":{"path":"content/post/2012-04-29-internationalization-for-libgdx-projects.mdx","title":"Localisation for libgdx projects","date":"2012-04-29T14:41:25.000Z","categories":["Games development"],"series":null,"description":null,"slug":"localisation-for-libgdx-projects","readingTime":"3 min read","draft":false,"disableComments":false,"keywords":[]},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\",\n    em: \"em\",\n    div: \"div\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Warning\"\n      }), \": Libgdx now counts with \", _jsx(_components.a, {\n        href: \"https://github.com/libgdx/libgdx/wiki/Internationalization-and-Localization\",\n        children: \"localisation support\"\n      }), \", rendering this approach obsolete.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Edit:\"\n      }), \" I just added UTF-8 support\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: _jsx(_components.a, {\n          href: \"http://www.altdevblogaday.com/2012/04/19/localization-notes/\",\n          children: \"Localization is a key aspect in games\"\n        })\n      }), \", specially if you want to reach a wider audience. I recently \", _jsx(_components.a, {\n        href: \"https://github.com/dsaltares/freegemas-gdx\",\n        children: \"ported Freegemas\"\n      }), \" to the libgdx platform and, as the original one, I wanted to ship it with multi-language support. There is no such a thing as \", _jsx(_components.a, {\n        href: \"http://www.gnu.org/software/gettext/\",\n        children: \"gettext\"\n      }), \" for Java and I didn't see the Android internationalization system as a good fit in a multiplatform development. That's why I developed my little own internationalization module.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/dsaltares/freegemas-gdx/blob/master/freegemas/src/com/siondream/freegemas/LanguagesManager.java\",\n          children: \"Download LanguagesManager.java\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Its usage is extremely simple, first we need a \", _jsx(_components.em, {\n        children: \"media/languages.xml\"\n      }), \" file where all the strings in our project will be located. The syntax is pretty straight forward, we lay language sections identified with the code for each language. Inside every language, we provide a list of key value pairs with the localized strings.\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"&lt; ?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\\n&lt;languages&gt;\\n\\n   &lt;language name=&quot;en_UK&quot; &gt;\\n\\n      &lt;string key=&quot;Timetrial mode&quot; value=&quot;Timetrial mode&quot; /&gt;\\n      &lt;string key=&quot;How to play&quot; value=&quot;How to play&quot; /&gt;\\n      &lt;string key=&quot;Exit&quot; value=&quot;Exit&quot; /&gt;\\n   &lt;/language&gt;\\n\\n\\n   &lt;language name=&quot;es_ES&quot; &gt;\\n\\n      &lt;string key=&quot;Timetrial mode&quot; value=&quot;Contrarreloj&quot; /&gt;\\n      &lt;string key=&quot;How to play&quot; value=&quot;Ayuda&quot; /&gt;\\n      &lt;string key=&quot;Exit&quot; value=&quot;Salir&quot; /&gt;\\n   &lt;/language&gt;\\n&lt;/languages&gt;\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can retrieve localized strings in our project through the \", _jsx(_components.em, {\n        children: \"LanguagesManager\"\n      }), \" class and its \", _jsx(_components.em, {\n        children: \"getString()\"\n      }), \" method. It's been implemented using the \", _jsx(_components.a, {\n        href: \"http://en.wikipedia.org/wiki/Singleton_pattern\",\n        children: \"Singleton\"\n      }), \" design pattern as we only need one instance accessible from, potentially, everywhere in the code. When we ask our manager for a certain string we will use its key, if it finds it within the current language, it\\\"ll return it, otherwise it\\\"ll return the key itself. That's why using strings in a base language (English) as keys can be a good idea, those will be returned by default.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For now, it uses \", _jsx(_components.a, {\n        href: \"http://en.wikipedia.org/wiki/Lazy_initialization\",\n        children: \"lazy initialization\"\n      }), \" which means it\\\"ll load the language the first time the \", _jsx(_components.em, {\n        children: \"getInstance()\"\n      }), \" method is called but that might change in the future. It automatically detects the system language (no matter if we are on Android or a desktop environment) and it fallsback to English if the system language is not among the available ones in the \", _jsx(_components.em, {\n        children: \"data/languages.xml\"\n      }), \" file. However, you can explicitly specify the language you want to load through the \", _jsx(_components.em, {\n        children: \"loadLanguage()\"\n      }), \" method.\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"LanguagesManager lang;\\n\\nlang = LanguagesManager.getInstance();\\n\\nString option1 = lang.getString(&quot;Timetrial mode&quot;);\\nString option2 = lang.getString(&quot;How to play&quot;);\\nString option3 = lang.getString(&quot;Exit&quot;);\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Freegemas libgdx is open source (\", _jsx(_components.a, {\n        href: \"http://www.gnu.org/licenses/quick-guide-gplv3.html\",\n        children: \"GPL v3\"\n      }), \") as is this internationalization module which means you\\\"re more than welcome to download it, use it and improve it. If you do the latest, make sure you distribute it the same way as me.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","scope":{}},"series":null},"__N_SSG":true}