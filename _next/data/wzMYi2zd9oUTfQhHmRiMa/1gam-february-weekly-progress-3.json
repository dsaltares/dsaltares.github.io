{"pageProps":{"metadata":{"path":"content/post/2013-02-26-1gam-february-weekly-progress-3.mdx","title":"#1GAM February: weekly progress 3","date":"2013-02-26T18:31:38.000Z","categories":["Games development"],"series":null,"description":null,"slug":"1gam-february-weekly-progress-3","readingTime":"2 min read","draft":false,"disableComments":false,"keywords":[]},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    img: \"img\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"It pleases me to say that this past week I've been able to keep it real and stick to my humble set of tasks:\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Victory and defeat mechanic\"\n      }), \": the spaceship has a limited amount of energy which diminishes after each collision with the world geometry. Once it's empty, the game enters the defeat state and restarts. If the player manages to abduct all the astronauts in the level, the game goes into the victory state. The whole entity creation â€“ deletion cycle has allowed me to spot some bugs and flaws in the entity system design, which is good.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Placeholder HUD\"\n      }), \": I've used the simple and yet powerful libgdx scene 2D elements to compose a minimalistic HUD which shows remaining astronauts, spaceship energy and elapsed time. Relax, it won't look this bad forever as the assets will be replaced by the final art in due time. I just wanted to get something functional.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Improved control and abduction system\"\n      }), \": this is where I've put most of the effort. Speed limits, collision restitution, impulses and so on have all been tweaked to make the spaceship control feel good. Luckily enough, I've made it a lot smoother and pleasant, which was paramount to make the game fun. However, beware! For abducting all the astronauts shall not be an easy task.\"]\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/wp/abduction.jpg\",\n      alt: \"abduction.jpg\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This week I\\\"ll be working on:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Refucktoring: some modules need a small cleanup.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Animated toasts: adding some effects for victory, defeat, abduction and collision situations.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Level system with locked/unlocked levels.\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","scope":{}},"series":null},"__N_SSG":true}