{"pageProps":{"metadata":{"path":"content/post/2011-05-24-sistema-de-actores.mdx","title":"Sistema de actores","date":"2011-05-24T11:01:41.000Z","categories":["Games development"],"series":null,"description":null,"slug":"sistema-de-actores","readingTime":"3 min read","draft":false,"disableComments":false,"keywords":[]},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    img: \"img\",\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    em: \"em\",\n    div: \"div\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.img, {\n      src: \"/img/wp/siontower-actores.png\",\n      alt: \"siontower-actores.png\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Tras publicar varios artículos en \", _jsx(_components.a, {\n        href: \"http://osl2.uca.es/iberogre/index.php/P%C3%A1gina_Principal\",\n        children: \"IberOgre\"\n      }), \", he decidido \", _jsx(_components.strong, {\n        children: \"retomar el trabajo en Sion Tower\"\n      }), \" con el objetivo de tener una versión inicial a finales de julio. La primera tarea que he llevado a cabo es una \", _jsx(_components.strong, {\n        children: \"refactorización del sistema de actores\"\n      }), \" con el objetivo de hacerlo más extensible y evitar la duplicación de código en la medida de lo posible aunque crezca la verticalidad en la jerarquía. Por el momento no todas las clases están implementadas pero sí diseñadas. A continuación, una pequeña explicación del sistema.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"El sistema de actores está compuesto por las siguientes clases:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"GameObject\"\n        }), \": encapsula un \", _jsx(_components.em, {\n          children: \"SceneNode\"\n        }), \" de Ogre con un \", _jsx(_components.em, {\n          children: \"Body\"\n        }), \" del \", _jsx(_components.a, {\n          href: \"/proyectos/pfc/sion-tower/stc-sion-tower-collisions-v0-2/\",\n          title: \"STC: Sion Tower Collisions v0.2\",\n          children: \"sistema de colisiones\"\n        }), \". Modela de forma genérica todos los objetos del juego.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"GameMesh\"\n        }), \": hereda de \", _jsx(_components.em, {\n          children: \"GameObject\"\n        }), \" y le añade un \", _jsx(_components.em, {\n          children: \"Entity\"\n        }), \", se utiliza para modelar los elementos del juego formados por mallas poligonales, como el escenario.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Actor\"\n        }), \": hereda de \", _jsx(_components.em, {\n          children: \"GameMesh\"\n        }), \" y añade estados, animaciones y manejadores de estados para los personajes del juego (enemigos y protagonista).\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Player\"\n        }), \": hereda de \", _jsx(_components.em, {\n          children: \"Actor\"\n        }), \" y modela al protagonista del juego añadiendo su lógica de control particular.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Enemy\"\n        }), \": también hereda de \", _jsx(_components.em, {\n          children: \"Actor\"\n        }), \" y modela de forma genérica el comportamiento de los enemigos.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Spell\"\n        }), \": hereda de \", _jsx(_components.em, {\n          children: \"GameObject\"\n        }), \" y añade sistemas de partículas para modelar los hechizos del juego junto a sus explosiones.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/wp/actors-clases.png\",\n      alt: \"actors-clases.png\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"En \", _jsx(_components.em, {\n        children: \"GameObject\"\n      }), \" contamos con el enumerado \", _jsx(_components.em, {\n        children: \"Type\"\n      }), \" para distinguir entre tipos de objetos de juego. Se cuenta con un método \", _jsx(_components.em, {\n        children: \"getType\"\n      }), \" virtual puro que cada clase deberá implementar devolviendo el valor del enumerado correspondiente. De esta forma podemos \", _jsx(_components.strong, {\n        children: \"conocer el tipo de un objeto\"\n      }), \" de juego a partir de un \", _jsx(_components.em, {\n        children: \"GameObject\"\n      }), \"* y hacer casting sin peligro en caso de ser absolutamente necesario. También es posible utilizar el tipo de objeto para hacer un filtrado en la detección de colisiones.\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"class GameObject {\\n    public:\\n\\n        enum Type {\\n            SIMPLEMESH = 0,\\n            FLOOR = 1,\\n            SCENE = 2,\\n            PLAYER = 3,\\n            ENEMY = 4,\\n            SPELL = 5\\n        };\\n\\n        virtual Type getType() const = 0;\\n\\n        ...\\n};\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Podéis conocer a fondo el sistema en \", _jsx(_components.a, {\n        href: \"https://forja.rediris.es/plugins/scmsvn/viewcvs.php/siontower/branches/actors/?root=cusl5-iberogre\",\n        children: \"la rama correspondiente de la Forja de Red Iris\"\n      }), \". En breve, os mostraré un vídeo con el sistema de lanzamiento de proyectiles mágicos funcionando.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","scope":{}},"series":null},"__N_SSG":true}