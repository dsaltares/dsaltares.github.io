{"pageProps":{"metadata":{"path":"content/post/2012-11-07-gleed2d-level-loading-system-for-libgdx.mdx","title":"GLEED2D level loading system for libgdx","date":"2012-11-07T10:00:52.000Z","categories":["Games development"],"series":null,"description":null,"slug":"gleed2d-level-loading-system-for-libgdx","readingTime":"3 min read","draft":false,"disableComments":false,"keywords":[]},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    a: \"a\",\n    h3: \"h3\",\n    img: \"img\",\n    ul: \"ul\",\n    li: \"li\",\n    div: \"div\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Update\"\n      }), \": the system had been \", _jsx(_components.a, {\n        href: \"https://github.com/libgdx/libgdx/tree/master/extensions/gdx-gleed\",\n        children: \"moved into the official libgdx repository\"\n      }), \" as an extension but then it was removed. Gleed doesn't support basic features such as relative paths for textures.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"I\\\"m happy to announce that I've made my first contribution to a relatively big open source project. I feel honoured to contribute to the brilliant \", _jsx(_components.a, {\n        href: \"https://github.com/libgdx/libgdx\",\n        children: \"libgdx framework\"\n      }), \" with these humble loader and renderer for GLEED2D levels. Hold on, what the hell is that? Please, read on.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"About GLEED\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"http://gleed2d.codeplex.com/\",\n        children: \"GLEED2D\"\n      }), \" is a non tiled based open source general purpose level editor. You can place textures and shapes, rotate and scale them. As usual, elements are laid in layers and it is also possible to add custom properties which makes it adequate for all kinds of purposes. Level are saved in an easy to parse XML format. It's based on XNA 3 but XNA 4 and Mono versions are on the works. What's good aboutGLEED2D is that it allows you to create smooth levels in a very nice way. Shapes can be used to define collision areas, triggers and so on.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This means you can set a few rules and conventions of your own and be able to fire up scripts, set the player spawn point and all sorts of level design sweetness.\"\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/wp/gleed-editor.png\",\n      alt: \"gleed-editor.png\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Features\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Full XML GLEED2D spec: layers, custom properties, textures, shapes (circle, rectangle, polygon), visibility, color tintsâ€¦\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Transforms: object positioning, rotation and scaling.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"LevelRenderer class with frustum culling\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"AssetManager integration through the LevelLoader class\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Use multiple Texture files or a single TextureAtlas for performance gain.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Possible improvements\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Make the renderer use a SpriteCache (tricky due to texture rotation)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Create a JSON exporter and loader for performance gain\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Load levels without using the AssetManager? Some people don't use it but they really should since levels tend to be heavy to load\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Suggest more!\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/wp/gleed-level-ingame.jpg\",\n      alt: \"gleed-level-ingame.jpg\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Usage\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When creating the level you need to specify the textures root folder or atlas file as a top level custom property:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"If using individual textures create the \\\"assetRoot\\\" property\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"If using an atlas create the \\\"atlas\\\" property\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"// Set loader in the Asset manager\\nm_assetManager.setLoader(Level.class, new LevelLoader(new InternalFileHandleResolver()));\\n\\n...\\n\\n// Tell the manager to load the level\\nm_assetManager.load(&quot;data/braidtest.xml&quot;, Level.class);\\n\\n...\\n\\n// When it&#39;s ready, fetch the level and create renderer\\nm_level = m_assetManager.get(&quot;data/braidtest.xml&quot;, Level.class);\\nm_levelRenderer = new LevelRenderer(m_level, null, Game.mpp);\\n\\n...\\n\\n// Render all layers\\nm_levelRenderer.render(m_camera);\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"However, if you get lost, there are Javadoc comments \", _jsx(_components.a, {\n        href: \"https://github.com/dsaltares/sionengine/tree/master/sionengine/src/com/siondream/engine/gleed\",\n        children: \"everywhere in the code\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Where do I get it?\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It should be soon in the \", _jsx(_components.a, {\n        href: \"libgdx.badlogicgames.com/nightlies/\",\n        children: \"libgdx nightly builds\"\n      }), \" but if you\\\"re really eager to use it and can't wait any longer (seriously?) you can go to the libgdx repository and find it in the \", _jsx(_components.a, {\n        href: \"https://github.com/libgdx/libgdx/tree/master/extensions/gdx-gleed\",\n        children: \"extensions section\"\n      }), \". Remember to leave some feedback of any flavour: rotten tomatoes, rocks and so on and so forth.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","scope":{}},"series":null},"__N_SSG":true}