{"pageProps":{"metadata":{"path":"content/post/2011-02-15-colisiones-iv-tests-de-colision.mdx","title":"Colisiones IV: Tests de colisión","date":"2011-02-15T20:43:36.000Z","categories":["Games development"],"series":null,"description":null,"slug":"colisiones-iv-tests-de-colision","readingTime":"8 min read","draft":false,"disableComments":false,"keywords":[]},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    img: \"img\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    em: \"em\",\n    strong: \"strong\",\n    h3: \"h3\",\n    div: \"div\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.img, {\n      src: \"/img/wp/colisiones-4.png\",\n      alt: \"colisiones-4.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Entregas:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/proyectos/pfc/sion-tower/colisiones-i-introduccion-requisitos-y-alternativas/\",\n          children: \"Colisiones I: Introducción, requisitos y alternativas\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/proyectos/pfc/sion-tower/colisiones-ii-diseno-general-de-stc/\",\n          children: \"Colisiones II: Diseño general de STC\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/proyectos/pfc/sion-tower/colisiones-iii-shape-y-collision-dispatching/\",\n          children: \"Colisiones III: Shape y Collision Dispatching\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.em, {\n          children: \"Colisiones IV: Tests de colisión\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"En la cuarta entrega de la serie de artículos de documentación sobre el \", _jsx(_components.strong, {\n        children: \"sistema de detección de colisiones de Sion Tower\"\n      }), \" (STC) trataremos en profundidad los \", _jsx(_components.strong, {\n        children: \"tests de colisión\"\n      }), \". Hasta ahora habíamos visto como funciona la clase abstracta Shape y sus implementaciones así como el Collision Dispatching. Este texto no pretende demostrar la validez de los algoritmos expuestos por la mediana complejidad que algunos entrañan, para una explicación más extensa sugiero acudir a las referencias contenidas en la sección de bibliografía.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Para cada test se ofrece una breve explicación, un diagrama aclaratorio y el algoritmo en C++ utilizando Ogre3D y las clases que hemos visto hasta el momento.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Teorema del plano de separación\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"El \", _jsx(_components.strong, {\n        children: \"Teorema del eje de separación\"\n      }), \" (\", _jsx(_components.a, {\n        href: \"http://en.wikipedia.org/wiki/Separating_axis_theorem\",\n        children: \"separating axis theorem\"\n      }), \") resulta extremadamente útil en la detección de colisiones. Este teorema asegura que dados dos objetos convexos en un plano 2D existe una línea sobre la cual, las proyecciones de los dos objetos no se solapan si y sólo si los objetos son disjuntos (no tienen puntos en común). Esta línea se conoce como eje de separación. En un espacio tridimensional el eje de separación se convierte en un plano de separación. El siguiente diagrama ilustra el teorema.\"]\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/wp/separatin-axis.png\",\n      alt: \"separatin-axis.png\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"En muchos tests \", _jsx(_components.strong, {\n        children: \"buscaremos el plano de separación\"\n      }), \", puede que existan varios pero en el momento que encontremos el primero podremos asegurar que los objetos no colisionan (suponiendo que sus formas son convexas). En cualquier videojuego lo normal es que dos objetos cualesquiera no colisionen, por lo que es más eficiente descartar posibles intersecciones cuanto antes. Buscando planos de separación.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Test Sphere-Sphere\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"El test entre dos esferas es el más sencillo y rápido de todos. Basta con comprobar si la distancia entre los centros de ambas esferas es menor que la suma de sus radios, en tal caso existiría colisión.\"\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/wp/test-sphere-sphere.png\",\n      alt: \"test-sphere-sphere.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Para calcular la distancia entre dos puntos es necesario una raíz cuadrada pero éstas son extremadamente caras. Podemos comparar la distancia al cuadrado con el cuadrado de la suma de los radios, una expresión equivalente y de mayor eficiencia.\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"bool Shape::getCollisionSphereSphere(Shape* shapeA, Shape* shapeB) {\\n    // Hacemos la conversión (estamos seguros de que son esferas)\\n    Sphere* sphereA = static_cast&lt;sphere *&gt;(shapeA);\\n    Sphere* sphereB = static_cast&lt;/sphere&gt;&lt;sphere *&gt;(shapeB);\\n\\n    // Hacemos el test\\n    Ogre::Vector3 s = sphereA-&gt;getCenter() - sphereB-&gt;getCenter();\\n    Ogre::Real totalRadius = sphereA-&gt;getRadius() + sphereB-&gt;getRadius();\\n\\n    return (s.squaredLength() &lt; = totalRadius * totalRadius);\\n}\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Test AABB-AABB\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"En la intersección entre cajas alineadas con los ejes emplearemos el teorema del plano de separación. Proyectamos las cajas sobre cada uno de los tres ejes y si algunas de las proyecciones no se solapan podremos asegurar que no existe colisión entre las AABB. El siguiente diagrama ilustra el test.\"\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/wp/test-aabb-aabb.png\",\n      alt: \"test-aabb-aabb.png\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"bool Shape::getCollisionAABBAABB(Shape* shapeA, Shape* shapeB) {\\n    // Hacemos la conversión (estamos seguros de que son AABBs)\\n    AxisAlignedBox* aabb1= static_cast&lt;axisalignedbox *&gt;(shapeA);\\n    AxisAlignedBox* aabb2 = static_cast&lt;/axisalignedbox&gt;&lt;axisalignedbox *&gt;(shapeB);\\n\\n    // Hacemos el test\\n    return (aabb1-&gt;getMaxPos().x &gt; aabb2-&gt;getMinPos().x &amp;&amp;\\n            aabb1-&gt;getMinPos().x &lt; aabb2-&gt;getMaxPos().x &amp;&amp;\\n            aabb1-&gt;getMaxPos().y &gt; aabb2-&gt;getMinPos().y &amp;&amp;\\n            aabb1-&gt;getMinPos().y &lt; aabb2-&gt;getMaxPos().y &amp;&amp;\\n            aabb1-&gt;getMaxPos().z &gt; aabb2-&gt;getMinPos().z &amp;&amp;\\n            aabb1-&gt;getMinPos().z &lt; aabb2-&gt;getMaxPos().z);\\n}\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Test Plane-Plane\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Los planos son infinitos por lo que la única situación en la que dos planos no colisionan es cuando estos son paralelos y no están a la misma distancia del origen. La orientación de los planos está definida por su vector normal. Si las dos normales son paralelas y la distancia con respecto al origen no coincide podremos asegurar que los planos no colisionan. Dos vectores son paralelos si su producto escalar es igual a 1.\"\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/wp/test-plane-plane.png\",\n      alt: \"test-plane-plane.png\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"bool Shape::getCollisionPlanePlane(Shape* shapeA, Shape* shapeB) {\\n    // Hacemos la conversión (estamos seguros de que son Planes)\\n    Plane* planeA = static_cast&lt;plane *&gt;(shapeA);\\n    Plane* planeB = static_cast&lt;/plane&gt;&lt;plane *&gt;(shapeB);\\n\\n    // Hacemos el test\\n    Ogre::Vector3 normalA = planeA-&gt;getNormal().normalisedCopy();\\n    Ogre::Vector3 normalB = planeB-&gt;getNormal().normalisedCopy();\\n    return normalA.dotProduct(normalB) != 1;\\n}\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Test Sphere-AABB\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"En este test se pueden producir dos casos en los que existe intersección entre los objetos. El primero se da cuando el centro de la esfera está contenida en el AABB mientras que el segundo tiene lugar cuando el centro está fuera de la caja pero existe intersección (el diagrama ilustra el segundo caso). En primer lugar comprobamos si el centro de la esfera está dentro de la caja. Posteriormente recorremos los vértices del AABB y elegimos el más cercano al centro de la esfera. Si la distancia entre ambos es menor que el radio de la esfera las dos formas colisionan.\"\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/wp/test-sphere-aabb.png\",\n      alt: \"test-sphere-aabb.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"De nuevo, utilizamos el cuadrado de la distancia para conseguir una mayor eficiencia.\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"bool Shape::getCollisionSphereAABB(Shape* shapeA, Shape* shapeB) {\\n    // Hacemos la conversión (estamos seguros de que A es Sphere y B es AABB)\\n    Sphere* sphere;\\n    AxisAlignedBox* aabb;\\n    if (shapeA-&gt;getType() == SPHERE) {\\n        sphere = static_cast&lt;sphere *&gt;(shapeA);\\n        aabb = static_cast&lt;axisalignedbox *&gt;(shapeB);\\n    } else {\\n        sphere = static_cast&lt;sphere *&gt;(shapeB);\\n        aabb = static_cast&lt;axisalignedbox *&gt;(shapeA);\\n    }\\n\\n    // Hacemos el test\\n    Ogre::Real s = 0;\\n    Ogre::Real d = 0;\\n    Ogre::Vector3 center = sphere-&gt;getCenter();\\n    Ogre::Vector3 minPos = aabb-&gt;getMinPos();\\n    Ogre::Vector3 maxPos = aabb-&gt;getMaxPos();\\n\\n    // Comprobamos si el centro de la esfera está dentro del AABB\\n    bool centerInsideAABB = (center.x &lt; = maxPos.x &amp;&amp;\\n                             center.x &gt;= minPos.x &amp;&amp;\\n                             center.y &lt; = maxPos.y &amp;&amp;\\n                             center.y &gt;= minPos.y &amp;&amp;\\n                             center.z &lt; = maxPos.z &amp;&amp;\\n                             center.z &gt;= minPos.z);\\n\\n    if (centerInsideAABB)\\n        return true;\\n\\n    // Comprobamos si la esfera y el AABB se intersectan\\n    for (int i = 0; i &lt; 3; ++i) {\\n        if (sphere-&gt;getCenter()[i] &lt; aabb-&gt;getMinPos()[i]) {\\n            s = sphere-&gt;getCenter()[i] - aabb-&gt;getMinPos()[i];\\n            d += s * s;\\n        } else if (sphere-&gt;getCenter()[i] &gt; aabb-&gt;getMaxPos()[i]) {\\n            s = sphere-&gt;getCenter()[i] - aabb-&gt;getMaxPos()[i];\\n            d += s * s;\\n        }\\n    }\\n\\n    return (d &lt; = sphere-&gt;getRadius() * sphere-&gt;getRadius());\\n}\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Test Sphere-Plane\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Comprobar si una esfera colisiona con un plano es tan sencillo como obtener la distancia entre ambos y compararla con el radio de la esfera como hemos hecho en otras ocasiones. La distancia entre el centro y el punto que conocemos del plano no es la distancia real entre ambas formas. Para calcular la distancia real tendremos que proyectar el vector p-c (punto del plano – centro de la esfera) sobre la normal del plano.\"\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/wp/test-sphere-plane.png\",\n      alt: \"test-sphere-plane.png\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Sólo nos es necesario el cuadrado de la distancia y lo comprobaremos con el cuadrado del radio (para evitarnos utilizar una raíz cuadrada).\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"bool Shape::getCollisionPlaneSphere(Shape* shapeA, Shape* shapeB) {\\n    // Hacemos la conversión (estamos seguros de que A es Plane y B es Sphere)\\n    Plane* plane;\\n    Sphere* sphere;\\n    if (shapeA-&gt;getType() == PLANE) {\\n        plane = static_cast&lt;plane *&gt;(shapeA);\\n        sphere = static_cast&lt;sphere *&gt;(shapeB);\\n    } else {\\n        plane = static_cast&lt;plane *&gt;(shapeB);\\n        sphere = static_cast&lt;sphere *&gt;(shapeA);\\n    }\\n\\n    // Hacemos el test\\n\\n    // Distancia del centro de la esfera al plano\\n    Ogre::Vector3 v = sphere-&gt;getCenter() - plane-&gt;getPosition();\\n    Ogre::Vector3 n = plane-&gt;getNormal().normalisedCopy();\\n    Ogre::Real d = abs(n.dotProduct(v));\\n\\n    // Si d &lt; = radio, hay colisión\\n    return d &lt;= sphere-&gt;getRadius();\\n}\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Test AABB-Plane\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"En el test entre AABB y plano calculamos el vértice más lejano y el más cercano al plano (pmin y pmax respectivamente). Si cada punto está a un lado distinto del plano podemos asegurar que ambas formas colisionan.\"\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/wp/test-plane-aabb.png\",\n      alt: \"test-plane-aabb.png\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"bool Shape::getCollisionPlaneAABB(Shape* shapeA, Shape* shapeB) {\\n    // Hacemos la conversión (estamos seguros de que A es Plane y B es AABB)\\n    Plane* plane;\\n    AxisAlignedBox* aabb;\\n    if (shapeA-&gt;getType() == PLANE) {\\n        plane = static_cast&lt;plane *&gt;(shapeA);\\n        aabb = static_cast&lt;axisalignedbox *&gt;(shapeB);\\n    } else {\\n        plane = static_cast&lt;plane *&gt;(shapeB);\\n        aabb = static_cast&lt;axisalignedbox *&gt;(shapeA);\\n    }\\n\\n    // Hacemos el test\\n    Ogre::Vector3 p;\\n    Ogre::Vector3 n;\\n\\n    for (int i = 0; i &lt; 3; ++i) {\\n        if (plane-&gt;getNormal()[i] &gt;= 0) {\\n            p[i] = aabb-&gt;getMaxPos()[i];\\n            n[i] = aabb-&gt;getMinPos()[i];\\n        } else {\\n            p[i] = aabb-&gt;getMaxPos()[i];\\n            n[i] = aabb-&gt;getMinPos()[i];\\n        }\\n    }\\n\\n    // Si p está en un lado diferente del plano que n, hay intersección\\n    Ogre::Real d1 = plane-&gt;getNormal().dotProduct(p - plane-&gt;getPosition());\\n    Ogre::Real d2 = plane-&gt;getNormal().dotProduct(n - plane-&gt;getPosition());\\n\\n    return ((d1 &lt; = 0 &amp;&amp; d2 &gt;= 0) || (d1 &gt;= 0 &amp;&amp; d2 &lt; = 0));\\n}\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Bibliografía\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Como podéis comprobar, hay un poco más de fundamento detrás de estos tests de lo que se ha explicado en la secciones anteriores. Para obtener más información sobre este interesante tema, recomiendo las siguientes lecturas (todo en inglés):\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"http://realtimecollisiondetection.net/\",\n          children: \"Real Time Collision Detection\"\n        }), \" (Christer Ericson ): excepcional libro que cubre todo lo relacionado sobre la detección de colisiones en 3D escrito por un trabajador de Sony Computer Entertainment America.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"http://www.gamasutra.com/view/feature/3383/simple_intersection_tests_for_games.php\",\n          children: \"Gamasutra \\\"Simple intersection tests for games\\\"\"\n        }), \" (Miguel Gomez): repaso por varios tests de intersección entre distintos tipos de formas (cubre cuerpos en movimiento).\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"http://www.gamasutra.com/view/feature/3190/advanced_collision_detection_.php\",\n          children: \"Gamasutra \\\"Advanced collision detection techniques\\\"\"\n        }), \" (Nick Bobic): técnicas de detección de colisiones, particionado del espacio y otras optimizaciones.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"http://www.metanetsoftware.com/technique/tutorialA.html\",\n          children: \"Metanet software \\\"Collision detection and response\\\"\"\n        }), \": explicación teórica sobre la detección de colisione. Cuenta con ejemplos gráficos interactivos para ilustrar cada concepto. Me la recomendó el compañero José Tomás Tocino.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"En el siguiente artículo lo dedicaremos a las clases Body y CollisionManager del sistema de detección de colisiones de Sion Tower.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","scope":{}},"series":null},"__N_SSG":true}