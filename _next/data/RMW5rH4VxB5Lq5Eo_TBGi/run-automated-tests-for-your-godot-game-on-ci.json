{"pageProps":{"metadata":{"path":"content/post/2018-11-26-run-godot-tests-ci-travis.mdx","title":"Run automated tests for your Godot game on CI","date":"2018-11-26T00:00:00.000Z","categories":["Games development"],"series":null,"description":null,"slug":"run-automated-tests-for-your-godot-game-on-ci","readingTime":"3 min read","draft":false,"disableComments":false,"keywords":[]},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h3: \"h3\",\n    p: \"p\",\n    a: \"a\",\n    img: \"img\",\n    code: \"code\",\n    div: \"div\",\n    pre: \"pre\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h3, {\n      children: \"Automated testing in gamedev\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Nowadays, most people agree that automated testing is absolutely crucial for\\nall software development. Not so much \", _jsx(_components.a, {\n        href: \"/games/thoughts-on-unit-testing-for-ashley-and-games-in-general/\",\n        children: \"when it comes to games development\"\n      }), \" though.\\nI still believe that the games industry would be able to iterate and ship faster by introducing unit and integration testing in the right places.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Godot and Gut\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://github.com/bitwes\",\n        children: \"Butch Wesley\"\n      }), \" appears to be onboard, considering\\nhe created \", _jsx(_components.a, {\n        href: \"https://github.com/bitwes/Gut\",\n        children: \"Gut\"\n      }), \", an automated testing framework\\nfor the \", _jsx(_components.a, {\n        href: \"https://godotengine.org/\",\n        children: \"Godot Game Engine\"\n      }), \". Gut provides you with a collection of utilities to write and run tests for your game. Out of the box you get basic assertions, test doubles and even full node tree simulation.\\nTests are run either from the Godot Editor or the command line using the godot executable itelf.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"However, what good are automated tests if we \", _jsx(_components.a, {\n        href: \"https://softwareengineering.stackexchange.com/a/308517\",\n        children: \"exclusively rely on developers running\\nthem locally\"\n      }), \"? The answer is: not very good at all.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Dead simple Godot CI pipeline\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"That is why I experimented with running GDScript tests on a Continuous\\nIntegration pipeline using the \", _jsx(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Headless_software\",\n        children: \"headless\"\n      }), \" Godot runtime. I created a repo\\n\", _jsx(_components.a, {\n        href: \"https://github.com/dsaltares/godot-ci-example\",\n        children: \"godot-ci-example\"\n      }), \" you can copy\\nto use on your own projects. Here is how it works.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Firstly, create a Godot project, install Gut from the Asset Library and enable it.\\nThis is the same as what is explained in Gut's \", _jsx(_components.a, {\n        href: \"https://github.com/bitwes/Gut/wiki/Install\",\n        children: \"Install\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"https://github.com/bitwes/Gut/wiki/Command-Line\",\n        children: \"Command Line\"\n      }), \" wiki pages.\"]\n    }), \"\\n\", _jsx(_components.img, {\n      src: \"/img/godot-ci/installing_gut.gif\",\n      alt: \"install-gut\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Create a trivial test in \", _jsx(_components.code, {\n        children: \"res://test/unit/test_example.gd\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-gdscript\",\n        children: _jsxs(_components.code, {\n          className: \"language-gdscript\",\n          children: [_jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"extends\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"res://addons/gut/test.gd\\\"\"\n          }), \"\\n\\n\", _jsx(_components.span, {\n            className: \"token keyword\",\n            children: \"func\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"test_assert_true_with_true\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \"\\n\\t\", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"assert_true\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \"(\"\n          }), _jsx(_components.span, {\n            className: \"token boolean\",\n            children: \"true\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token string\",\n            children: \"\\\"Should pass, true is true\\\"\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \")\"\n          }), \"\\n\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can now run these tests from the command line.\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"godot -d -s --path ./project addons/gut/gut_cmdln.gd -gdir=res://test -ginclude_subdirs -gexit\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Where \", _jsx(_components.code, {\n        children: \"godot\"\n      }), \" is your Godot binary and \", _jsx(_components.code, {\n        children: \"project\"\n      }), \" is the folder where your game lives.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Alright, we now have a basic test setup we can run locally. Let's move onto the meaty\\npart of the article, continuous integration. I'll be using\\n\", _jsx(_components.a, {\n        href: \"https://travis-ci.org/\",\n        children: \"Travis CI\"\n      }), \" because it's easy and free for open source projects hosted on Github, but knock yourself out with your CI system of choice.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Travis looks for a \", _jsx(_components.code, {\n        children: \".travis.yml\"\n      }), \" file in the root of your repo. This file tells Travis how to build the project and run tests. I recommend you take a quick look at the \", _jsx(_components.a, {\n        href: \"https://docs.travis-ci.com/user/tutorial/\",\n        children: \"docs\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.a, {\n        href: \"https://github.com/dsaltares/godot-ci-example/blob/master/.travis.yml\",\n        children: _jsx(_components.code, {\n          children: \".travis.yml\"\n        })\n      }), \" file is trivial.\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-yaml\",\n        children: _jsxs(_components.code, {\n          className: \"language-yaml\",\n          children: [_jsx(_components.span, {\n            className: \"token key atrule\",\n            children: \"language\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" minimal\\n\", _jsx(_components.span, {\n            className: \"token key atrule\",\n            children: \"script\"\n          }), _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \":\"\n          }), \" ./run_tests.sh\\n\"]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.a, {\n        href: \"https://github.com/dsaltares/godot-ci-example/blob/master/run_tests.sh\",\n        children: _jsx(_components.code, {\n          children: \"run_tests.sh\"\n        })\n      }), \" script will download the headless Godot runtime and run the command we showed above. Make sure \", _jsx(_components.code, {\n        children: \"run_tests.sh\"\n      }), \" has executable permissions.\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-bash\",\n        children: _jsxs(_components.code, {\n          className: \"language-bash\",\n          children: [_jsx(_components.span, {\n            className: \"token assign-left variable\",\n            children: \"GODOT_VERSION\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token number\",\n            children: \"3.0\"\n          }), \".6\\n\", _jsx(_components.span, {\n            className: \"token assign-left variable\",\n            children: \"GODOT_BIN\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \"Godot_v\", _jsx(_components.span, {\n            className: \"token variable\",\n            children: \"${GODOT_VERSION}\"\n          }), \"-stable_linux_headless.64\\n\", _jsx(_components.span, {\n            className: \"token assign-left variable\",\n            children: \"GODOT_ZIP\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), _jsx(_components.span, {\n            className: \"token variable\",\n            children: \"${GODOT_BIN}\"\n          }), \".zip\\n\", _jsx(_components.span, {\n            className: \"token assign-left variable\",\n            children: \"GODOT_URL\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \"https://downloads.tuxfamily.org/godotengine/\", _jsx(_components.span, {\n            className: \"token variable\",\n            children: \"${GODOT_VERSION}\"\n          }), \"/\", _jsx(_components.span, {\n            className: \"token variable\",\n            children: \"${GODOT_ZIP}\"\n          }), \"\\n\\n\", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"curl\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token variable\",\n            children: \"${GODOT_URL}\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token parameter variable\",\n            children: \"--output\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token variable\",\n            children: \"${GODOT_ZIP}\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"unzip\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token variable\",\n            children: \"${GODOT_ZIP}\"\n          }), \"\\n\", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"chmod\"\n          }), \" +x \", _jsx(_components.span, {\n            className: \"token variable\",\n            children: \"${GODOT_BIN}\"\n          }), \"\\n./\", _jsx(_components.span, {\n            className: \"token variable\",\n            children: \"${GODOT_BIN}\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token parameter variable\",\n            children: \"-d\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token parameter variable\",\n            children: \"-s\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token parameter variable\",\n            children: \"--path\"\n          }), \" ./project addons/gut/gut_cmdln.gd \", _jsx(_components.span, {\n            className: \"token parameter variable\",\n            children: \"-gdir\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"=\"\n          }), \"res://test \", _jsx(_components.span, {\n            className: \"token parameter variable\",\n            children: \"-ginclude_subdirs\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token parameter variable\",\n            children: \"-gexit\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"As you can see, it's also pretty easy to parameterize which Godot version you want\\nto use.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"And that's it! You can get a cool \\\"Build passing\\\" badge for your repo. \", _jsx(_components.a, {\n        href: \"https://travis-ci.org/dsaltares/godot-ci-example\",\n        children: \"Here's what a typical build would look like\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-unknown\",\n        children: _jsx(_components.code, {\n          className: \"language-unknown\",\n          children: \"/-----------------------------------------\\nRunning Script res://test/unit/test_example.gd\\n-----------------------------------------/\\n* test_assert_true_with_true\\n*****************\\nRun Summary\\n*****************\\n***  Totals  ***\\n  scripts:          1\\n  tests:            1\\n  passing asserts:  1\\n  failing asserts:  0\\n  pending:          0\\n+++ 1 passed 0 failed.  Tests finished in:  0.0 +++\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Happy testing!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","scope":{}},"series":null},"__N_SSG":true}