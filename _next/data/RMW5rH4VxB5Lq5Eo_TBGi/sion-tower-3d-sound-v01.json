{"pageProps":{"metadata":{"path":"content/post/2011-02-09-sion-tower-3d-sound-v0-1.mdx","title":"Sion Tower 3D Sound v0.1","date":"2011-02-09T17:44:03.000Z","categories":["Games development"],"series":null,"description":null,"slug":"sion-tower-3d-sound-v01","readingTime":"2 min read","draft":false,"disableComments":false,"keywords":[]},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    img: \"img\",\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.img, {\n      src: \"/img/wp/sion-tower-3d-sound.jpg\",\n      alt: \"sion-tower-3d-sound.jpg\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Hace algo más de un mes escribí un \", _jsxs(_components.a, {\n        href: \"/proyectos/pfc/sion-tower/sistema-de-audio-pseudo-3d-integrado-con-ogre/\",\n        children: [\"artículo sobre el \", _jsx(_components.strong, {\n          children: \"sistema de audio 3D\"\n        })]\n      }), \" \", _jsx(_components.strong, {\n        children: \"de Sion Tower\"\n      }), \". Al igual que la pequeña biblioteca de colisiones que he implementado, es muy reutilizable y sería una pena que el código no le sirva a nadie más. Por ello, \", _jsx(_components.strong, {\n        children: \"he decidido liberar la versión 0.1\"\n      }), \" como paquete descargable desde la forja de Red Iris.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Características\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Reproducción de música y efectos de sonido: WAV, MP3, OGG…\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Integración completa con el sistema de gestión de recursos de Ogre3D.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Inserción de sonidos en la escena de forma que puede producirse un efecto 3D en función de la distancia y ángulo entre nodos.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Descarga\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"El sistema está escrito en C++ estándar y sólo depende de Ogre3D y SDL mixer por lo que \", _jsx(_components.strong, {\n        children: \"funciona en una amplia variedad de plataformas\"\n      }), \". El paquete viene con el fichero de licencia (GPL v3) y la documentación completa en html generada con Doxygen.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Por supuesto, \", _jsx(_components.strong, {\n        children: \"estoy abierto a cualquier sugerencia\"\n      }), \", posible mejora, avisos de errores y todo lo que se os ocurra.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"http://forja.rediris.es/frs/download.php/2074/siontower-3dsound-v0.1.zip\",\n          children: \"Descargar Sion Tower 3D Sound v0.1\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","scope":{}},"series":null},"__N_SSG":true}