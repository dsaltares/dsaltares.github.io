{"pageProps":{"metadata":{"path":"content/post/2014-07-20-ashley-1-0-1-released.mdx","title":"Ashley 1.0.1 released","date":"2014-07-20T20:13:16.000Z","categories":["Games development"],"series":null,"description":null,"slug":"ashley-101-released","readingTime":"2 min read","draft":false,"disableComments":false,"keywords":[]},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Finally! During the past couple of months me and a bunch of awesome \", _jsx(_components.a, {\n        href: \"https://github.com/libgdx/ashley/blob/master/AUTHORS\",\n        children: \"collaborators\"\n      }), \" have been working on a proper Ashley release and now it's done. Here is the list of the new shiny features.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Mind that some of them break the previous API. However, this is our first official release, we'll push hard to keep the API backwards compatible from now on.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://github.com/libgdx/ashley/commit/3cd93f2c17fd65470a60dfa2af7d84c2ee7e7865\",\n          children: \"Gradle\"\n        }), \": we got rid of the Eclipse projects and now use Gradle to manage our dependencies and build process.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Maven Central: Ashley is now available from Maven Central, which makes it dead easy for your project to depend on it. In Gradle, add the following dependency: \", _jsx(_components.code, {\n          children: \"compile \\\"com.badlogicgames.ashley:ashley:1.0.1\\\"\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"http://libgdx.badlogicgames.com:8080/job/ashley/\",\n          children: \"Jenkins build\"\n        }), \": Mario kindly offered us some server time to make sure Ashley is always stable.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://github.com/libgdx/ashley/tree/master/ashley/tests/com/badlogic/ashley\",\n          children: \"Unit tests\"\n        }), \": there are unit tests for pretty much every component in Ashley. They are run after every commit by our Jenkins job.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://github.com/libgdx/ashley/tree/master/ashley/src/com/badlogic/ashley/utils\",\n          children: \"Immutable collections\"\n        }), \": core Ashley classes now return \", _jsx(_components.code, {\n          children: \"ImmutableArray\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"ImmutableIntMap\"\n        }), \" references, making it harder for client code to break the system.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://github.com/libgdx/ashley/commit/9492d14a3e5cf4ad0d87305f8f7bb298bb8d687a\",\n          children: \"Family filtering\"\n        }), \": now we get the collection of entities that have a set of components, have at least one component from a given set and do not have a single component from another given set.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"http://www.gwtproject.org/\",\n          children: \"GWT\"\n        }), \" compatibility: you can now use Ashley for HTML5 games through the magic of GWT and Libgdx.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://github.com/libgdx/ashley/commit/81d9a2e5f38df186f4b147b82ede274c950795b6\",\n          children: \"Depends on gdx core\"\n        }), \": this has allowed us to remove all the duplicated optimised container classes and gives us a GWT compatible reflection API. Some might say it's a big dependency but we do believe the pros outweigh the cons.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Cleanup and bug fixes.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"I try to keep an up-to-date \", _jsx(_components.a, {\n        href: \"https://github.com/libgdx/ashley/blob/master/TODO.md\",\n        children: \"TODO\"\n      }), \" list with a very informal roadmap. Here is what to expect next:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Performance tests and comparison with Artemis\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Make javadocs available online\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Complete wiki\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Feel free to send your suggestions by opening an \", _jsx(_components.a, {\n        href: \"https://github.com/libgdx/ashley/issues?state=open\",\n        children: \"issue\"\n      }), \"!\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","scope":{}},"series":null},"__N_SSG":true}