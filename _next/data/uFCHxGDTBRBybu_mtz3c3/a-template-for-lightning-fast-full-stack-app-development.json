{"pageProps":{"metadata":{"path":"content/post/2022-12-06-template-lightning-fast-full-stack-development.mdx","title":"A template for lightning-fast full-stack app development","date":"2022-12-06T00:00:00.000Z","categories":["Development"],"series":null,"description":"A walkthrough of the template I use to build full-stack apps with lightning speed. Featuring technologies like Next.js, Typescript, Tailwind CSS, tRPC and Prisma.","slug":"a-template-for-lightning-fast-full-stack-app-development","readingTime":"4 min read","draft":false,"disableComments":false,"keywords":["full-stack development stack","Next.js","Typescript","Web development","GitHub","open source","PostgreSQL","TailwindCSS","Deployment","Docker","tRPC","NextAuth.js","Prisma","Vercel","Jest","React Testing Library"],"banner":"/img/scaffolding.webp"},"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    img: \"img\",\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    code: \"code\",\n    div: \"div\",\n    pre: \"pre\",\n    span: \"span\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.img, {\n      src: \"/img/scaffolding.webp\",\n      alt: \"Scaffolding with the sky as background\",\n      title: \"By Hu Jiarui on Unsplash\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Javascript ecosystem is wonderful. It enables us to ship and iterate on web applications extremely fast. It has never been so easy to build something. However, far too often, we spend a ridiculous amount of time fine-tuning configuration, choosing a particular set of libraries, bike-shedding over eslint settings or wiring up CI/CD pipelines.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Instead, we should focus on building the product itself. So I did all the dirty work, so you don't have to.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is my \", _jsx(_components.a, {\n        href: \"https://github.com/dsaltares/next-starter\",\n        children: \"Next.js starter template\"\n      }), \", which I use for all my projects. Credit goes to the exceptional open-source maintainers who created all the great libraries. I simply wired them together.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"🧑‍🏫 Principles\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here are the principles I followed when making every technology choice in this template.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"World-class developer experience\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Tight feedback loops\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://blog.codinghorror.com/falling-into-the-pit-of-success\",\n          children: \"Pit of Success\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Focus on building the product, not managing the infrastructure\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Speed of iteration over flexibility\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [_jsx(_components.strong, {\n        children: \"🧰\"\n      }), \" The stack\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Knowing the principles for each decision, here's the set of technologies you will find in the template.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://nextjs.org/\",\n          children: _jsx(_components.strong, {\n            children: \"⚛️ Next.js\"\n          })\n        }), \" - \", _jsx(_components.strong, {\n          children: \"the\"\n        }), \" fullstack framework for JS/TS. It has, by far, the most active community and development.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://www.typescriptlang.org/\",\n          children: _jsx(_components.strong, {\n            children: \"🚀 Typescript\"\n          })\n        }), \" - for the superior developer experience and to catch issues early.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://tailwindcss.com/\",\n          children: _jsx(_components.strong, {\n            children: \"🎨 Tailwind CSS\"\n          })\n        }), \" - never write CSS again. Ship as little as possible to the client. Works great with Tailwind UI and \", _jsx(_components.a, {\n          href: \"https://headlessui.com/\",\n          children: \"headless UI\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://trpc.io/\",\n          children: _jsx(_components.strong, {\n            children: \"🔗 tRPC\"\n          })\n        }), \" - end-to-end typesafe APIs. This setup makes it easy to test procedures in isolation.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://tanstack.com/query/v4\",\n          children: _jsx(_components.strong, {\n            children: \"🌍 React Query\"\n          })\n        }), \" - the best server state management library. The template includes a \", _jsx(_components.code, {\n          children: \"useMutation\"\n        }), \" hook that makes optimistic updates an absolute breeze. The setup is inspired by the recommendations of \", _jsx(_components.a, {\n          href: \"https://tkdodo.eu/blog/practical-react-query\",\n          children: \"TKDodo's series\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://next-auth.js.org/\",\n          children: _jsx(_components.strong, {\n            children: \"🔒 NextAuth.js\"\n          })\n        }), \" - trivial authentication for Next.js apps while owning all of your data.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://www.prisma.io/\",\n          children: _jsx(_components.strong, {\n            children: \"📙 Prisma\"\n          })\n        }), \" - the best ORM for Typescript. This template assumes you'll be using PostgreSQL.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsxs(_components.a, {\n          href: \"https://www.docker.com/\",\n          children: [\"🐳 \", _jsx(_components.strong, {\n            children: \"Docker\"\n          })]\n        }), \" - enabling 100% offline development using a local \", _jsx(_components.strong, {\n          children: \"PostgreSQL\"\n        }), \" DB and an email server via \", _jsx(_components.strong, {\n          children: _jsx(_components.a, {\n            href: \"https://github.com/mailhog/MailHog\",\n            children: \"MailHog\"\n          })\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://jestjs.io/\",\n          children: _jsx(_components.strong, {\n            children: \"🃏 Jest\"\n          })\n        }), \" - unit tests with \", _jsx(_components.strong, {\n          children: _jsx(_components.a, {\n            href: \"https://testing-library.com/docs/react-testing-library/intro/\",\n            children: \"React Testing Library\"\n          })\n        }), \" and \", _jsx(_components.a, {\n          href: \"https://mswjs.io/\",\n          children: _jsx(_components.strong, {\n            children: \"msw\"\n          })\n        }), \". Integration tests that can talk to an ephemeral PostgreSQL database. Coverage is automatically collected.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsxs(_components.strong, {\n          children: [\"🚢 \", _jsx(_components.a, {\n            href: \"https://github.com/features/actions\",\n            children: \"GitHub Actions\"\n          }), \" and \", _jsx(_components.a, {\n            href: \"https://vercel.com/\",\n            children: \"Vercel\"\n          })]\n        }), \" - linting, testing, and full preview and production deployments.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://github.com/dependabot\",\n          children: _jsx(_components.strong, {\n            children: \"🌳 Dependabot\"\n          })\n        }), \" - to keep all your dependencies up to date.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [_jsx(_components.strong, {\n        children: \"🏎️\"\n      }), \" Get started\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Install dependencies:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.docker.com/\",\n          children: \"Docker\"\n        })\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"node (ideally via \", _jsx(_components.a, {\n          href: \"https://github.com/Schniz/fnm\",\n          children: \"fnm\"\n        }), \")\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Create a new Next.js project using this starter template. You can use either \", _jsx(_components.code, {\n        children: \"yarn\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"npm\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-bash\",\n        children: _jsxs(_components.code, {\n          className: \"language-bash\",\n          children: [_jsx(_components.span, {\n            className: \"token function\",\n            children: \"yarn\"\n          }), \" create next-app \", _jsx(_components.span, {\n            className: \"token parameter variable\",\n            children: \"--example\"\n          }), \" https://github.com/dsaltares/next-starter \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), \"your_app_name\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \"\\nnpx create-next-app \", _jsx(_components.span, {\n            className: \"token parameter variable\",\n            children: \"--example\"\n          }), \" https://github.com/dsaltares/next-starter \", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"<\"\n          }), \"your_app_name\", _jsx(_components.span, {\n            className: \"token operator\",\n            children: \">\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Set up your local environment variables.\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-bash\",\n        children: _jsxs(_components.code, {\n          className: \"language-bash\",\n          children: [_jsx(_components.span, {\n            className: \"token function\",\n            children: \"cp\"\n          }), \" .env.sample .env\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Spin up infrastructure dependencies locally.\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-bash\",\n        children: _jsxs(_components.code, {\n          className: \"language-bash\",\n          children: [_jsx(_components.span, {\n            className: \"token function\",\n            children: \"yarn\"\n          }), \" docker:up\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Start the development server.\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-bash\",\n        children: _jsxs(_components.code, {\n          className: \"language-bash\",\n          children: [_jsx(_components.span, {\n            className: \"token function\",\n            children: \"yarn\"\n          }), \" dev\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Run all tests, only unit tests or only integration tests.\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-bash\",\n        children: _jsxs(_components.code, {\n          className: \"language-bash\",\n          children: [_jsx(_components.span, {\n            className: \"token function\",\n            children: \"yarn\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token builtin class-name\",\n            children: \"test\"\n          }), \" \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"yarn\"\n          }), \" test:unit \", _jsx(_components.span, {\n            className: \"token function\",\n            children: \"yarn\"\n          }), \" test:integration\\n\"]\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Run tests in watch mode and break stuff!\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-highlight\",\n      children: _jsx(_components.pre, {\n        className: \"language-bash\",\n        children: _jsxs(_components.code, {\n          className: \"language-bash\",\n          children: [_jsx(_components.span, {\n            className: \"token function\",\n            children: \"yarn\"\n          }), \" test:unit \", _jsx(_components.span, {\n            className: \"token parameter variable\",\n            children: \"--watch\"\n          }), \"\\n\"]\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The local development database is persisted locally in the \", _jsx(_components.code, {\n        children: \"database\"\n      }), \" folder.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"🚀 Wrapping it up\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"At the end of the day, this is my personal Next.js starter template. I could have used a different set of technologies and configuration, but ultimately, this is what works best for me. I am also aware of the similarities with the \", _jsx(_components.a, {\n        href: \"https://create.t3.gg/\",\n        children: \"T3 stack\"\n      }), \". However, my template is more opinionated about testing, deployment and other development workflows.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"🙌 Thanks for reading! I hope you find the template useful by working with it directly or as inspiration for your setup.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","scope":{}},"series":null},"__N_SSG":true}